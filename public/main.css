/*!******************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./styles/index.scss ***!
  \******************************************************************************************************************************************************/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

.footer__background__overlay, .preloader, html {
  height: 100%;
  width: 100%;
  position: absolute;
  top: 0;
  left: 0;
}

/* Recommended styles for Splitting */
.splitting .word,
.splitting .char {
  display: inline-block;
}

/* Psuedo-element chars */
.splitting .char {
  position: relative;
}

/**
 * Populate the psuedo elements with the character to allow for expanded effects
 * Set to `display: none` by default; just add `display: block` when you want
 * to use the psuedo elements
 */
.splitting .char::before,
.splitting .char::after {
  content: attr(data-char);
  position: absolute;
  top: 0;
  left: 0;
  visibility: hidden;
  transition: inherit;
  user-select: none;
}

/* Expanded CSS Variables */
.splitting {
  /* The center word index */
  --word-center: calc((var(--word-total) - 1) / 2);
  /* The center character index */
  --char-center: calc((var(--char-total) - 1) / 2);
  /* The center character index */
  --line-center: calc((var(--line-total) - 1) / 2);
}

.splitting .word {
  /* Pecent (0-1) of the word's position */
  --word-percent: calc(var(--word-index) / var(--word-total));
  /* Pecent (0-1) of the line's position */
  --line-percent: calc(var(--line-index) / var(--line-total));
}

.splitting .char {
  /* Percent (0-1) of the char's position */
  --char-percent: calc(var(--char-index) / var(--char-total));
  /* Offset from center, positive & negative */
  --char-offset: calc(var(--char-index) - var(--char-center));
  /* Absolute distance from center, only positive */
  --distance: calc(
     (var(--char-offset) * var(--char-offset)) / var(--char-center)
  );
  /* Distance from center where -1 is the far left, 0 is center, 1 is far right */
  --distance-sine: calc(var(--char-offset) / var(--char-center));
  /* Distance from center where 1 is far left/far right, 0 is center */
  --distance-percent: calc((var(--distance) / var(--char-center)));
}

.splitting.cells img {
  width: 100%;
  display: block;
}

@supports (display: grid) {
  .splitting.cells {
    position: relative;
    overflow: hidden;
    background-size: cover;
    visibility: hidden;
  }
  .splitting .cell-grid {
    background: inherit;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: grid;
    grid-template: repeat(var(--row-total), 1fr)/repeat(var(--col-total), 1fr);
  }
  .splitting .cell {
    background: inherit;
    position: relative;
    overflow: hidden;
  }
  .splitting .cell-inner {
    background: inherit;
    position: absolute;
    visibility: visible;
    /* Size to fit the whole container size */
    width: calc(100% * var(--col-total));
    height: calc(100% * var(--row-total));
    /* Position properly */
    left: calc(-100% * var(--col-index));
    top: calc(-100% * var(--row-index));
  }
  /* Helper variables for advanced effects */
  .splitting .cell {
    --center-x: calc((var(--col-total) - 1) / 2);
    --center-y: calc((var(--row-total) - 1) / 2);
    /* Offset from center, positive & negative */
    --offset-x: calc(var(--col-index) - var(--center-x));
    --offset-y: calc(var(--row-index) - var(--center-y));
    /* Absolute distance from center, only positive */
    --distance-x: calc( (var(--offset-x) * var(--offset-x)) / var(--center-x) );
    /* Absolute distance from center, only positive */
    --distance-y: calc( (var(--offset-y) * var(--offset-y)) / var(--center-y) );
  }
}
.home__welcome__sections__section__overlay__title__text {
  font-family: "Ubuntu, sans-serif";
  font-size: 2rem;
}

.register__section__titles__main, .login__section__titles__main {
  font-family: "Ubuntu, sans-serif";
  font-size: 2.4rem;
}

.home__header__titles__text {
  font-family: "Ubuntu, sans-serif";
  font-size: 3.2rem;
}

.home__welcome__title__text, .header__title__text {
  font-family: "Ubuntu, sans-serif";
  font-size: 3.8rem;
}

.home__welcome__sections__section__overlay__desc__text {
  font-family: "Ubuntu, sans-serif";
  font-size: 1.4rem;
}

body {
  font-family: "Ubuntu, sans-serif";
  font-size: 1.6rem;
}

.register__section__titles__sub, .help__info, .login__section__message__text, .login__section__titles__sub, .contact__section__message__text, .form__list__item__textarea, .form__list__item__input {
  font-family: "Ubuntu, sans-serif";
  font-size: 1.8rem;
}

.nav__links__item__link {
  font-family: "Ubuntu, sans-serif";
  font-size: 2.4rem;
}

.link, .home__welcome__title__text, .active, .header__title__text {
  position: relative;
  display: inline-block;
  vertical-align: top;
}

/*
  HORIZONTAL LINE ANIMATION.
*/
.link:after, .home__welcome__title__text:after, .active:after, .header__title__text:after {
  content: "";
  position: absolute;
  bottom: -2rem;
  left: 0;
  width: 100%;
  height: 2px;
  background: linear-gradient(90deg, rgb(0, 0, 0) 20%, rgb(255, 42, 112) 50%, rgb(0, 0, 0) 80%);
  transition: transform 0.7s ease-in-out;
}

.link:hover:after, .home__welcome__title__text:after, .active:after, .header__title__text:after {
  transform: scaleX(1);
  transform-origin: center center;
}

.link:after {
  transform: scaleX(0);
  transform-origin: center center;
}

.home__welcome__title__text, .active, .header__title__text {
  display: inline-block;
}
.link {
  display: inline-block;
}
.register, .login, .contact {
  height: 100%;
  width: 100%;
  z-index: 1;
  display: flex;
  flex-direction: column;
}

.register__section, .login__section, .contact__section {
  padding: 8.8rem 0;
  align-self: center;
  justify-self: center;
}

.header {
  height: 39.6rem;
  width: 100%;
  position: relative;
}
.header__bg {
  height: 100%;
  width: 100%;
  position: relative;
}
.header__bg__img {
  height: 100%;
  width: 100%;
  object-fit: cover;
  object-position: top;
}
.header__bg__overlay {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  background: rgba(0, 0, 0, 0.7921568627);
}
.header__title {
  position: absolute;
  top: 65%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}
.header__title__text {
  text-transform: uppercase;
}

.form {
  width: 70.4rem;
  background: transparent;
}
.form__list__item {
  display: flex;
  flex-direction: column;
  margin: 3rem;
}
.form__list__item__input {
  background: transparent;
  border: 1px solid;
  border-color: #ffffff;
  color: #ffffff;
  padding: 3.2rem 2.4rem;
  width: 100%;
}
.form__list__item__input::placeholder {
  color: #ffffff;
}
.form__list__item__textarea {
  height: 35.6rem;
  background: transparent;
  border: 1px solid;
  border-color: #ffffff;
  color: #ffffff;
  padding: 3.2rem 2.4rem;
  width: 100%;
}
.form__list__item__textarea::placeholder {
  color: #ffffff;
}
.form__list__item__button {
  align-self: flex-end;
  width: 18rem;
  height: 6.1rem;
  background: transparent;
  border: 1px solid;
  border-color: #ffffff;
  border-right: none;
  border-left: none;
  padding: 2rem 1.8rem;
  color: #ffffff;
  text-transform: uppercase;
  cursor: pointer;
}

@font-face {
  font-family: "Ubuntu, sans-serif";
  src: url(2bb78709f6261b9d47c4.woff2) format("woff2"), url(2a4aa4bfb25815da9f6d.woff) format("woff");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
* {
  box-sizing: border-box;
  user-select: none;
}

::-webkit-scrollbar {
  width: 10px;
}

::-webkit-scrollbar-track {
  background: #000000;
}

::-webkit-scrollbar-thumb {
  background: #ff2a70;
  border-radius: 2px;
}

::-webkit-scrollbar-thumb:hover {
  background: #ff2a70;
}

html {
  font-size: 0.5208333333vw;
  overscroll-behavior: none;
  background: #000000;
  color: #ffffff;
}
@media (max-width: 767px) {
  html {
    font-size: 1.3020833333vw;
  }
}

body {
  font-family: "Ubuntu, sans-serif";
}

a {
  color: inherit;
  text-decoration: none;
  outline: none;
}

img {
  opacity: 0;
  transition: opacity 0.5s ease;
  vertical-align: middle;
}
img.loaded {
  opacity: 1;
}

.preloader {
  background: #000000;
  display: grid;
  place-content: center;
  z-index: 5;
  display: none;
}
.preloader__img {
  height: 5rem;
  width: 5rem;
}

.nav {
  z-index: 4;
  background: #ff2a70;
  height: 12.4rem;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
}
.nav__wrapper {
  height: 100%;
  width: 100%;
  background: #000000;
  border: 2px solid #ff2a70;
  border-bottom-right-radius: 40px;
  border-top-left-radius: 40px;
  display: flex;
  justify-content: space-around;
  align-items: center;
}
.nav__links {
  display: flex;
}
.nav__links__item {
  margin: 0 2.4rem;
}
.nav__links__item__link {
  text-transform: uppercase;
}

.active {
  color: #ff2a70;
}

.footer {
  height: 80rem;
  width: 100%;
}
.footer__background {
  height: 100%;
  width: 100%;
  position: relative;
}
.footer__background__img {
  height: 100%;
  width: 100%;
  object-fit: cover;
}
.footer__background__overlay {
  background: rgba(0, 0, 0, 0.8901960784);
}

.home {
  z-index: 1;
}
.home__header {
  height: 90rem;
  display: grid;
  grid-template-columns: 1fr 2fr 1fr;
  grid-template-rows: repeat(3, 1fr);
}
.home__header__bg {
  grid-area: 1/1/-1/-1;
  height: 100%;
  width: 100%;
}
.home__header__bg__img {
  height: 100%;
  width: 100%;
  object-fit: cover;
}
.home__header__titles {
  grid-area: 2/2/3/3;
  justify-self: center;
  align-self: center;
  text-align: center;
}
.home__header__titles__main {
  height: 100%;
  width: 100%;
  object-fit: cover;
}
.home__header__titles__text {
  width: 100%;
  letter-spacing: 3rem;
  margin-top: 2rem;
  text-transform: uppercase;
}
.home__header__titles__btm {
  height: 100%;
  width: 100%;
  object-fit: cover;
}
.home__welcome {
  margin: 15rem 0;
  height: 100%;
  width: 100%;
}
.home__welcome__title {
  text-align: center;
}
.home__welcome__title__text {
  text-transform: uppercase;
}
.home__welcome__sections {
  height: 100%;
  width: 100%;
  padding: 10rem 24rem;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 3rem;
}
.home__welcome__sections__section {
  height: 100%;
  width: 100%;
  position: relative;
}
.home__welcome__sections__section__img {
  height: 100%;
  width: 100%;
  object-fit: cover;
}
.home__welcome__sections__section__overlay {
  opacity: 0;
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  border-top: 2px solid #ff2a70;
  border-bottom: 2px solid #ff2a70;
  background: #000000;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  transition: all 0.5s ease-in-out;
}
.home__welcome__sections__section__overlay:hover {
  opacity: 1;
}
.home__welcome__sections__section__overlay__icon {
  height: 10rem;
  width: 10rem;
  padding: 2rem;
  border: 1px solid #ff2a70;
  border-radius: 8px;
}
.home__welcome__sections__section__overlay__icon__img {
  height: 100%;
  width: 100%;
  object-fit: cover;
}
.home__welcome__sections__section__overlay__title {
  margin: 2.5rem 0;
}
.home__welcome__sections__section__overlay__title__text {
  text-transform: uppercase;
}
.home__welcome__sections__section__overlay__desc {
  padding: 0 5rem;
  text-align: center;
}
.home__welcome__sections__section__overlay__desc__text {
  line-height: 2.2rem;
}

.contact__section__message {
  text-align: center;
}
.contact .form {
  height: 65.9rem;
}

.red {
  color: #ff2a70;
}

.login .form {
  height: 27.9rem;
  margin: 5rem 0 10rem 0;
}
.login__section {
  height: 64rem;
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  align-items: center;
}
.login__section__titles {
  text-align: center;
}
.login__section__titles__main {
  text-transform: uppercase;
  letter-spacing: 0.18rem;
}
.login__section__titles__sub {
  margin-top: 2rem;
  line-height: 3.24rem;
}
.login__section__message {
  text-align: center;
}
.login__section__message__text a {
  color: #ff2a70;
  text-decoration: underline;
}

.red {
  color: #ff2a70;
}

.help {
  position: absolute;
  top: 90%;
  left: 20rem;
  transform: translateY(-50%);
  opacity: 0;
}
.help__info {
  line-height: 2.5rem;
  letter-spacing: 0.2rem;
}

.register .form {
  height: 49.7rem;
  margin: 2rem 0 10rem 0;
}
.register__section {
  height: 80rem;
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  align-items: center;
}
.register__section__titles {
  text-align: center;
}
.register__section__titles__main {
  text-transform: uppercase;
  letter-spacing: 0.18rem;
}
.register__section__titles__sub {
  margin-top: 2rem;
  line-height: 3.24rem;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5jc3MiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7RUFhQztFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUNDRDs7QURFQTs7RUFFQztBQ0NEOztBREVBO0VBQ0M7QUNDRDs7QURFQTtFQUNDO0FDQ0Q7O0FERUE7O0VBRUM7RUFDQTtBQ0NEOztBREVBO0VBQ0M7RUFDQTtBQ0NEOztBQzNDQTtFQUVFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUQ2Q0Y7O0FFbkRBO0FBQ0E7O0VBRUU7QUZzREY7O0FFbkRBO0FBQ0E7RUFDRTtBRnNERjs7QUVuREE7Ozs7RUFBQTtBQUtBOztFQUVFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0FGc0RGOztBRW5EQTtBQUVBO0VBQ0U7RUFDQTtFQUVBO0VBQ0E7RUFFQTtFQUNBO0FGbURGOztBRWhEQTtFQUNFO0VBQ0E7RUFFQTtFQUNBO0FGa0RGOztBRS9DQTtFQUNFO0VBQ0E7RUFFQTtFQUNBO0VBRUE7RUFDQTs7R0FBQTtFQUlBO0VBQ0E7RUFFQTtFQUNBO0FGOENGOztBRTNDQTtFQUF1QjtFQUFhO0FGZ0RwQzs7QUU5Q0E7RUFDRTtJQUNFO0lBQ0E7SUFDQTtJQUNBO0VGaURGO0VFOUNBO0lBQ0U7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtFRmdERjtFRTdDQTtJQUNFO0lBQ0E7SUFDQTtFRitDRjtFRTVDQTtJQUNFO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtFRjhDRjtFRTNDQTtFQUNBO0lBQ0U7SUFDQTtJQUVBO0lBQ0E7SUFDQTtJQUVBO0lBQ0E7SUFFQTtJQUNBO0VGMENGO0FBQ0Y7QUdsS0E7RUFFRSxpQ0NFUTtFRERSO0FIbUtGOztBR2hLQTtFQUVFLGlDQ0pRO0VES1I7QUhrS0Y7O0FHL0pBO0VBRUUsaUNDVlE7RURXUjtBSGlLRjs7QUc5SkE7RUFFRSxpQ0NoQlE7RURpQlI7QUhnS0Y7O0FLektBO0VBRUUsaUNEVlE7RUNXUjtBTDJLRjs7QUt4S0E7RUFFRSxpQ0RoQlE7RUNpQlI7QUwwS0Y7O0FLdktBO0VBRUUsaUNEdEJRO0VDdUJSO0FMeUtGOztBSzFKQTtFQUVFLGlDRHhDUTtFQ3lDUjtBTDRKRjs7QU16TUE7RUFFRTtFQUVBO0VBQ0E7QU4wTUY7O0FNdk1BOztDQUFBO0FBSUE7RUFFRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUtBO0FOb01GOztBTWpNQTtFQUVFO0VBQ0E7QU5tTUY7O0FNaE1BO0VBRUU7RUFDQTtBTmtNRjs7QU0vTEE7RUFJRTtBTitMRjtBTXRMQTtFQUlFO0FOcUxGO0FPak9BO0VBRUU7RUFDQTtFQUVBO0VBRUE7RUFDQTtBUGdPRjs7QU83TkE7RUFFRTtFQUVBO0VBQ0E7QVA4TkY7O0FPM05BO0VBRUU7RUFDQTtFQUVBO0FQNE5GO0FPMU5FO0VBRUU7RUFDQTtFQUVBO0FQME5KO0FPeE5JO0VBRUU7RUFDQTtFQUVBO0VBQ0E7QVB3Tk47QU9yTkk7RUFFRTtFQUNBO0VBQ0E7RUFFQTtFQUNBO0VBRUE7QVBvTk47QU9oTkU7RUFFRTtFQUNBO0VBQ0E7RUFFQTtFQUtBO0FQNE1KO0FPMU1JO0VBS0U7QVB3TU47O0FROVJBO0VBRUU7RUFFQTtBUitSRjtBUTFSSTtFQUVFO0VBQ0E7RUFFQTtBUjBSTjtBUXhSTTtFQUlFO0VBQ0E7RUFDQSxxQkpyQks7RUlzQkwsY0p0Qks7RUl1Qkw7RUFFQTtBUnNSUjtBUXBSUTtFQUVFLGNKN0JHO0FKa1RiO0FRalJNO0VBSUU7RUFDQTtFQUNBO0VBQ0EscUJKeENLO0VJeUNMLGNKekNLO0VJMENMO0VBRUE7QVIrUVI7QVE3UVE7RUFFRSxjSmhERztBSjhUYjtBUTFRTTtFQUVFO0VBRUE7RUFDQTtFQUVBO0VBRUE7RUFDQSxxQko5REs7RUkrREw7RUFDQTtFQUVBO0VBRUEsY0pwRUs7RUlxRUw7RUFFQTtBUnFRUjs7QVM3VUE7RUFDRSxpQ0xHUTtFS0ZSO0VBRUE7RUFDQTtFQUNBO0FUK1VGO0FVclZBO0VBRUU7RUFDQTtBVnNWRjs7QVVuVkE7RUFDRTtBVnNWRjs7QVVuVkE7RUFDRSxtQk5YaUI7QUppV25COztBVW5WQTtFQUNFLG1CTmJVO0VNY1Y7QVZzVkY7O0FVblZBO0VBQ0UsbUJObEJVO0FKd1daOztBVW5WQTtFQUlFO0VBRUE7RUFFQSxtQk4vQmlCO0VNZ0NqQixjTi9CVztBSmdYYjtBV3NOSTtFRGhqQko7SUFhSTtFVmlWRjtBQUNGOztBVTlVQTtFQUlFLGlDTnhDUTtBSnNYVjs7QVUzVUE7RUFFRTtFQUNBO0VBQ0E7QVY2VUY7O0FVMVVBO0VBRUU7RUFDQTtFQUNBO0FWNFVGO0FVMVVFO0VBRUU7QVYyVUo7O0FZellBO0VBSUUsbUJSSmlCO0VRTWpCO0VBQ0E7RUFFQTtFQUVBO0Fac1lGO0FZcFlFO0VBRUU7RUFDQTtBWnFZSjs7QWFyWkE7RUFFRTtFQUVBLG1CVEZVO0VTSVY7RUFDQTtFQUVBO0VBQ0E7RUFDQTtBYm9aRjtBYWxaRTtFQUVFO0VBQ0E7RUFFQSxtQlRsQmU7RVNvQmY7RUFDQTtFQUNBO0VBRUE7RUFDQTtFQUNBO0FiZ1pKO0FhcFlFO0VBRUU7QWJxWUo7QWFuWUk7RUFFRTtBYm9ZTjtBYWpZTTtFQUlFO0FiZ1lSOztBYTFYQTtFQUlFLGNUM0RVO0FKcWJaOztBY3ZiQTtFQUVFO0VBQ0E7QWR5YkY7QWN2YkU7RUFFRTtFQUNBO0VBRUE7QWR1Yko7QWNyYkk7RUFFRTtFQUNBO0VBQ0E7QWRzYk47QWNuYkk7RUFJRTtBZGtiTjs7QWV6Y0E7RUFFRTtBZjJjRjtBZXpjRTtFQUVFO0VBRUE7RUFDQTtFQUNBO0FmeWNKO0FldmNJO0VBRUU7RUFDQTtFQUNBO0Fmd2NOO0FldGNNO0VBRUU7RUFDQTtFQUNBO0FmdWNSO0FlbmNJO0VBRUU7RUFFQTtFQUNBO0VBRUE7QWZrY047QWVoY007RUFFRTtFQUNBO0VBQ0E7QWZpY1I7QWU5Yk07RUFJRTtFQUNBO0VBQ0E7RUFDQTtBZjZiUjtBZTFiTTtFQUVFO0VBQ0E7RUFDQTtBZjJiUjtBZXRiRTtFQUVFO0VBRUE7RUFDQTtBZnNiSjtBZW5iSTtFQUVFO0Fmb2JOO0FlbGJNO0VBS0U7QWZnYlI7QWU1YUk7RUFFRTtFQUNBO0VBRUE7RUFFQTtFQUNBO0VBQ0E7RUFFQTtBZjBhTjtBZXhhTTtFQUVFO0VBQ0E7RUFFQTtBZndhUjtBZXRhUTtFQUVFO0VBQ0E7RUFDQTtBZnVhVjtBZXBhUTtFQUVFO0VBRUE7RUFDQTtFQUNBO0VBRUE7RUFDQTtFQUVBO0VBQ0E7RUFDQTtFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBRUE7QWZnYVY7QWU5WlU7RUFFRTtBZitaWjtBZTVaVTtFQUVFO0VBQ0E7RUFFQTtFQUVBO0VBQ0E7QWYyWlo7QWV6Wlk7RUFFRTtFQUNBO0VBQ0E7QWYwWmQ7QWV0WlU7RUFFRTtBZnVaWjtBZXJaWTtFQUlFO0Fmb1pkO0FlaFpVO0VBR0U7RUFDQTtBZmdaWjtBZTlZWTtFQUlFO0FmNllkOztBZ0JyakJJO0VBRUU7QWhCdWpCTjtBZ0I3aUJFO0VBRUU7QWhCOGlCSjs7QWlCcGtCQTtFQUVFO0FqQnNrQkY7O0FpQi9qQkU7RUFFRTtFQUVBO0FqQmdrQko7QWlCN2pCRTtFQUlFO0VBRUE7RUFDQTtFQUVBO0VBQ0E7QWpCMGpCSjtBaUJ4akJJO0VBRUU7QWpCeWpCTjtBaUJ2akJNO0VBSUU7RUFDQTtBakJzakJSO0FpQm5qQk07RUFJRTtFQUNBO0FqQmtqQlI7QWlCOWlCSTtFQUVFO0FqQitpQk47QWlCemlCUTtFQUVFLGNiekRFO0VhMERGO0FqQjBpQlY7O0FrQnRtQkE7RUFFRTtBbEJ3bUJGOztBa0JybUJBO0VBRUU7RUFDQTtFQUNBO0VBRUE7RUFDQTtBbEJzbUJGO0FrQnBtQkU7RUFJRTtFQUNBO0FsQm1tQko7O0FrQjNsQkU7RUFFRTtFQUVBO0FsQjRsQko7QWtCemxCRTtFQUlFO0VBRUE7RUFDQTtFQUVBO0VBQ0E7QWxCc2xCSjtBa0JwbEJJO0VBRUU7QWxCcWxCTjtBa0JubEJNO0VBSUU7RUFDQTtBbEJrbEJSO0FrQi9rQk07RUFJRTtFQUNBO0FsQjhrQlIsQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N2ZW5kZXByb2V2ZS8uL3N0eWxlcy9iYXNlL19yZXNldC5zY3NzIiwid2VicGFjazovL3N2ZW5kZXByb2V2ZS8uL3N0eWxlcy9pbmRleC5zY3NzIiwid2VicGFjazovL3N2ZW5kZXByb2V2ZS8uL3N0eWxlcy91dGlscy9fbWl4aW5zLnNjc3MiLCJ3ZWJwYWNrOi8vc3ZlbmRlcHJvZXZlLy4vc3R5bGVzL3V0aWxzL19zcGxpdHRpbmcuc2NzcyIsIndlYnBhY2s6Ly9zdmVuZGVwcm9ldmUvLi9zdHlsZXMvc2hhcmVkL190aXRsZXMuc2NzcyIsIndlYnBhY2s6Ly9zdmVuZGVwcm9ldmUvLi9zdHlsZXMvdXRpbHMvX3ZhcmlhYmxlcy5zY3NzIiwid2VicGFjazovL3N2ZW5kZXByb2V2ZS8uL3N0eWxlcy9zaGFyZWQvX2Rlc2Muc2NzcyIsIndlYnBhY2s6Ly9zdmVuZGVwcm9ldmUvLi9zdHlsZXMvc2hhcmVkL19saW5rcy5zY3NzIiwid2VicGFjazovL3N2ZW5kZXByb2V2ZS8uL3N0eWxlcy9zaGFyZWQvX3BhZ2VzLnNjc3MiLCJ3ZWJwYWNrOi8vc3ZlbmRlcHJvZXZlLy4vc3R5bGVzL3NoYXJlZC9fZm9ybS5zY3NzIiwid2VicGFjazovL3N2ZW5kZXByb2V2ZS8uL3N0eWxlcy9iYXNlL19mb250cy5zY3NzIiwid2VicGFjazovL3N2ZW5kZXByb2V2ZS8uL3N0eWxlcy9iYXNlL19iYXNlLnNjc3MiLCJ3ZWJwYWNrOi8vc3ZlbmRlcHJvZXZlLy4vbm9kZV9tb2R1bGVzL2luY2x1ZGUtbWVkaWEvZGlzdC9faW5jbHVkZS1tZWRpYS5zY3NzIiwid2VicGFjazovL3N2ZW5kZXByb2V2ZS8uL3N0eWxlcy9jb21wb25lbnRzL19wcmVsb2FkZXIuc2NzcyIsIndlYnBhY2s6Ly9zdmVuZGVwcm9ldmUvLi9zdHlsZXMvbGF5b3V0L19uYXZpZ2F0aW9uLnNjc3MiLCJ3ZWJwYWNrOi8vc3ZlbmRlcHJvZXZlLy4vc3R5bGVzL2xheW91dC9fZm9vdGVyLnNjc3MiLCJ3ZWJwYWNrOi8vc3ZlbmRlcHJvZXZlLy4vc3R5bGVzL3BhZ2VzL19ob21lLnNjc3MiLCJ3ZWJwYWNrOi8vc3ZlbmRlcHJvZXZlLy4vc3R5bGVzL3BhZ2VzL19jb250YWN0LnNjc3MiLCJ3ZWJwYWNrOi8vc3ZlbmRlcHJvZXZlLy4vc3R5bGVzL3BhZ2VzL19sb2dpbi5zY3NzIiwid2VicGFjazovL3N2ZW5kZXByb2V2ZS8uL3N0eWxlcy9wYWdlcy9fcmVnaXN0ZXIuc2NzcyJdLCJzb3VyY2VzQ29udGVudCI6WyJodG1sLCBib2R5LCBkaXYsIHNwYW4sIGFwcGxldCwgb2JqZWN0LCBpZnJhbWUsXHJcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSxcclxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxyXG5kZWwsIGRmbiwgZW0sIGltZywgaW5zLCBrYmQsIHEsIHMsIHNhbXAsXHJcbnNtYWxsLCBzdHJpa2UsIHN0cm9uZywgc3ViLCBzdXAsIHR0LCB2YXIsXHJcbmIsIHUsIGksIGNlbnRlcixcclxuZGwsIGR0LCBkZCwgb2wsIHVsLCBsaSxcclxuZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsXHJcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxyXG5hcnRpY2xlLCBhc2lkZSwgY2FudmFzLCBkZXRhaWxzLCBlbWJlZCxcclxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLFxyXG5tZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcclxudGltZSwgbWFyaywgYXVkaW8sIHZpZGVvIHtcclxuXHRtYXJnaW46IDA7XHJcblx0cGFkZGluZzogMDtcclxuXHRib3JkZXI6IDA7XHJcblx0Zm9udC1zaXplOiAxMDAlO1xyXG5cdGZvbnQ6IGluaGVyaXQ7XHJcblx0dmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xyXG59XHJcblxyXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLFxyXG5mb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb24ge1xyXG5cdGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcblxyXG5vbCwgdWwge1xyXG5cdGxpc3Qtc3R5bGU6IG5vbmU7XHJcbn1cclxuXHJcbmJsb2NrcXVvdGUsIHEge1xyXG5cdHF1b3Rlczogbm9uZTtcclxufVxyXG5cclxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXHJcbnE6YmVmb3JlLCBxOmFmdGVyIHtcclxuXHRjb250ZW50OiAnJztcclxuXHRjb250ZW50OiBub25lO1xyXG59XHJcblxyXG50YWJsZSB7XHJcblx0Ym9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuXHRib3JkZXItc3BhY2luZzogMDtcclxufVxyXG4iLCJodG1sLCBib2R5LCBkaXYsIHNwYW4sIGFwcGxldCwgb2JqZWN0LCBpZnJhbWUsXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXG5hLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsXG5kZWwsIGRmbiwgZW0sIGltZywgaW5zLCBrYmQsIHEsIHMsIHNhbXAsXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxuYiwgdSwgaSwgY2VudGVyLFxuZGwsIGR0LCBkZCwgb2wsIHVsLCBsaSxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxudGFibGUsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyLCB0aCwgdGQsXG5hcnRpY2xlLCBhc2lkZSwgY2FudmFzLCBkZXRhaWxzLCBlbWJlZCxcbmZpZ3VyZSwgZmlnY2FwdGlvbiwgZm9vdGVyLCBoZWFkZXIsIGhncm91cCxcbm1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxudGltZSwgbWFyaywgYXVkaW8sIHZpZGVvIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBib3JkZXI6IDA7XG4gIGZvbnQtc2l6ZTogMTAwJTtcbiAgZm9udDogaW5oZXJpdDtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xufVxuXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLFxuZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWVudSwgbmF2LCBzZWN0aW9uIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbm9sLCB1bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5cbmJsb2NrcXVvdGUsIHEge1xuICBxdW90ZXM6IG5vbmU7XG59XG5cbmJsb2NrcXVvdGU6YmVmb3JlLCBibG9ja3F1b3RlOmFmdGVyLFxucTpiZWZvcmUsIHE6YWZ0ZXIge1xuICBjb250ZW50OiBcIlwiO1xuICBjb250ZW50OiBub25lO1xufVxuXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwO1xufVxuXG4uZm9vdGVyX19iYWNrZ3JvdW5kX19vdmVybGF5LCAucHJlbG9hZGVyLCBodG1sIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG59XG5cbi8qIFJlY29tbWVuZGVkIHN0eWxlcyBmb3IgU3BsaXR0aW5nICovXG4uc3BsaXR0aW5nIC53b3JkLFxuLnNwbGl0dGluZyAuY2hhciB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cblxuLyogUHN1ZWRvLWVsZW1lbnQgY2hhcnMgKi9cbi5zcGxpdHRpbmcgLmNoYXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi8qKlxuICogUG9wdWxhdGUgdGhlIHBzdWVkbyBlbGVtZW50cyB3aXRoIHRoZSBjaGFyYWN0ZXIgdG8gYWxsb3cgZm9yIGV4cGFuZGVkIGVmZmVjdHNcbiAqIFNldCB0byBgZGlzcGxheTogbm9uZWAgYnkgZGVmYXVsdDsganVzdCBhZGQgYGRpc3BsYXk6IGJsb2NrYCB3aGVuIHlvdSB3YW50XG4gKiB0byB1c2UgdGhlIHBzdWVkbyBlbGVtZW50c1xuICovXG4uc3BsaXR0aW5nIC5jaGFyOjpiZWZvcmUsXG4uc3BsaXR0aW5nIC5jaGFyOjphZnRlciB7XG4gIGNvbnRlbnQ6IGF0dHIoZGF0YS1jaGFyKTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgdHJhbnNpdGlvbjogaW5oZXJpdDtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG59XG5cbi8qIEV4cGFuZGVkIENTUyBWYXJpYWJsZXMgKi9cbi5zcGxpdHRpbmcge1xuICAvKiBUaGUgY2VudGVyIHdvcmQgaW5kZXggKi9cbiAgLS13b3JkLWNlbnRlcjogY2FsYygodmFyKC0td29yZC10b3RhbCkgLSAxKSAvIDIpO1xuICAvKiBUaGUgY2VudGVyIGNoYXJhY3RlciBpbmRleCAqL1xuICAtLWNoYXItY2VudGVyOiBjYWxjKCh2YXIoLS1jaGFyLXRvdGFsKSAtIDEpIC8gMik7XG4gIC8qIFRoZSBjZW50ZXIgY2hhcmFjdGVyIGluZGV4ICovXG4gIC0tbGluZS1jZW50ZXI6IGNhbGMoKHZhcigtLWxpbmUtdG90YWwpIC0gMSkgLyAyKTtcbn1cblxuLnNwbGl0dGluZyAud29yZCB7XG4gIC8qIFBlY2VudCAoMC0xKSBvZiB0aGUgd29yZCdzIHBvc2l0aW9uICovXG4gIC0td29yZC1wZXJjZW50OiBjYWxjKHZhcigtLXdvcmQtaW5kZXgpIC8gdmFyKC0td29yZC10b3RhbCkpO1xuICAvKiBQZWNlbnQgKDAtMSkgb2YgdGhlIGxpbmUncyBwb3NpdGlvbiAqL1xuICAtLWxpbmUtcGVyY2VudDogY2FsYyh2YXIoLS1saW5lLWluZGV4KSAvIHZhcigtLWxpbmUtdG90YWwpKTtcbn1cblxuLnNwbGl0dGluZyAuY2hhciB7XG4gIC8qIFBlcmNlbnQgKDAtMSkgb2YgdGhlIGNoYXIncyBwb3NpdGlvbiAqL1xuICAtLWNoYXItcGVyY2VudDogY2FsYyh2YXIoLS1jaGFyLWluZGV4KSAvIHZhcigtLWNoYXItdG90YWwpKTtcbiAgLyogT2Zmc2V0IGZyb20gY2VudGVyLCBwb3NpdGl2ZSAmIG5lZ2F0aXZlICovXG4gIC0tY2hhci1vZmZzZXQ6IGNhbGModmFyKC0tY2hhci1pbmRleCkgLSB2YXIoLS1jaGFyLWNlbnRlcikpO1xuICAvKiBBYnNvbHV0ZSBkaXN0YW5jZSBmcm9tIGNlbnRlciwgb25seSBwb3NpdGl2ZSAqL1xuICAtLWRpc3RhbmNlOiBjYWxjKFxuICAgICAodmFyKC0tY2hhci1vZmZzZXQpICogdmFyKC0tY2hhci1vZmZzZXQpKSAvIHZhcigtLWNoYXItY2VudGVyKVxuICApO1xuICAvKiBEaXN0YW5jZSBmcm9tIGNlbnRlciB3aGVyZSAtMSBpcyB0aGUgZmFyIGxlZnQsIDAgaXMgY2VudGVyLCAxIGlzIGZhciByaWdodCAqL1xuICAtLWRpc3RhbmNlLXNpbmU6IGNhbGModmFyKC0tY2hhci1vZmZzZXQpIC8gdmFyKC0tY2hhci1jZW50ZXIpKTtcbiAgLyogRGlzdGFuY2UgZnJvbSBjZW50ZXIgd2hlcmUgMSBpcyBmYXIgbGVmdC9mYXIgcmlnaHQsIDAgaXMgY2VudGVyICovXG4gIC0tZGlzdGFuY2UtcGVyY2VudDogY2FsYygodmFyKC0tZGlzdGFuY2UpIC8gdmFyKC0tY2hhci1jZW50ZXIpKSk7XG59XG5cbi5zcGxpdHRpbmcuY2VsbHMgaW1nIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG5Ac3VwcG9ydHMgKGRpc3BsYXk6IGdyaWQpIHtcbiAgLnNwbGl0dGluZy5jZWxscyB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIH1cbiAgLnNwbGl0dGluZyAuY2VsbC1ncmlkIHtcbiAgICBiYWNrZ3JvdW5kOiBpbmhlcml0O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlOiByZXBlYXQodmFyKC0tcm93LXRvdGFsKSwgMWZyKS9yZXBlYXQodmFyKC0tY29sLXRvdGFsKSwgMWZyKTtcbiAgfVxuICAuc3BsaXR0aW5nIC5jZWxsIHtcbiAgICBiYWNrZ3JvdW5kOiBpbmhlcml0O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICB9XG4gIC5zcGxpdHRpbmcgLmNlbGwtaW5uZXIge1xuICAgIGJhY2tncm91bmQ6IGluaGVyaXQ7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG4gICAgLyogU2l6ZSB0byBmaXQgdGhlIHdob2xlIGNvbnRhaW5lciBzaXplICovXG4gICAgd2lkdGg6IGNhbGMoMTAwJSAqIHZhcigtLWNvbC10b3RhbCkpO1xuICAgIGhlaWdodDogY2FsYygxMDAlICogdmFyKC0tcm93LXRvdGFsKSk7XG4gICAgLyogUG9zaXRpb24gcHJvcGVybHkgKi9cbiAgICBsZWZ0OiBjYWxjKC0xMDAlICogdmFyKC0tY29sLWluZGV4KSk7XG4gICAgdG9wOiBjYWxjKC0xMDAlICogdmFyKC0tcm93LWluZGV4KSk7XG4gIH1cbiAgLyogSGVscGVyIHZhcmlhYmxlcyBmb3IgYWR2YW5jZWQgZWZmZWN0cyAqL1xuICAuc3BsaXR0aW5nIC5jZWxsIHtcbiAgICAtLWNlbnRlci14OiBjYWxjKCh2YXIoLS1jb2wtdG90YWwpIC0gMSkgLyAyKTtcbiAgICAtLWNlbnRlci15OiBjYWxjKCh2YXIoLS1yb3ctdG90YWwpIC0gMSkgLyAyKTtcbiAgICAvKiBPZmZzZXQgZnJvbSBjZW50ZXIsIHBvc2l0aXZlICYgbmVnYXRpdmUgKi9cbiAgICAtLW9mZnNldC14OiBjYWxjKHZhcigtLWNvbC1pbmRleCkgLSB2YXIoLS1jZW50ZXIteCkpO1xuICAgIC0tb2Zmc2V0LXk6IGNhbGModmFyKC0tcm93LWluZGV4KSAtIHZhcigtLWNlbnRlci15KSk7XG4gICAgLyogQWJzb2x1dGUgZGlzdGFuY2UgZnJvbSBjZW50ZXIsIG9ubHkgcG9zaXRpdmUgKi9cbiAgICAtLWRpc3RhbmNlLXg6IGNhbGMoICh2YXIoLS1vZmZzZXQteCkgKiB2YXIoLS1vZmZzZXQteCkpIC8gdmFyKC0tY2VudGVyLXgpICk7XG4gICAgLyogQWJzb2x1dGUgZGlzdGFuY2UgZnJvbSBjZW50ZXIsIG9ubHkgcG9zaXRpdmUgKi9cbiAgICAtLWRpc3RhbmNlLXk6IGNhbGMoICh2YXIoLS1vZmZzZXQteSkgKiB2YXIoLS1vZmZzZXQteSkpIC8gdmFyKC0tY2VudGVyLXkpICk7XG4gIH1cbn1cbi5ob21lX193ZWxjb21lX19zZWN0aW9uc19fc2VjdGlvbl9fb3ZlcmxheV9fdGl0bGVfX3RleHQge1xuICBmb250LWZhbWlseTogXCJVYnVudHUsIHNhbnMtc2VyaWZcIjtcbiAgZm9udC1zaXplOiAycmVtO1xufVxuXG4ucmVnaXN0ZXJfX3NlY3Rpb25fX3RpdGxlc19fbWFpbiwgLmxvZ2luX19zZWN0aW9uX190aXRsZXNfX21haW4ge1xuICBmb250LWZhbWlseTogXCJVYnVudHUsIHNhbnMtc2VyaWZcIjtcbiAgZm9udC1zaXplOiAyLjRyZW07XG59XG5cbi5ob21lX19oZWFkZXJfX3RpdGxlc19fdGV4dCB7XG4gIGZvbnQtZmFtaWx5OiBcIlVidW50dSwgc2Fucy1zZXJpZlwiO1xuICBmb250LXNpemU6IDMuMnJlbTtcbn1cblxuLmhvbWVfX3dlbGNvbWVfX3RpdGxlX190ZXh0LCAuaGVhZGVyX190aXRsZV9fdGV4dCB7XG4gIGZvbnQtZmFtaWx5OiBcIlVidW50dSwgc2Fucy1zZXJpZlwiO1xuICBmb250LXNpemU6IDMuOHJlbTtcbn1cblxuLmhvbWVfX3dlbGNvbWVfX3NlY3Rpb25zX19zZWN0aW9uX19vdmVybGF5X19kZXNjX190ZXh0IHtcbiAgZm9udC1mYW1pbHk6IFwiVWJ1bnR1LCBzYW5zLXNlcmlmXCI7XG4gIGZvbnQtc2l6ZTogMS40cmVtO1xufVxuXG5ib2R5IHtcbiAgZm9udC1mYW1pbHk6IFwiVWJ1bnR1LCBzYW5zLXNlcmlmXCI7XG4gIGZvbnQtc2l6ZTogMS42cmVtO1xufVxuXG4ucmVnaXN0ZXJfX3NlY3Rpb25fX3RpdGxlc19fc3ViLCAuaGVscF9faW5mbywgLmxvZ2luX19zZWN0aW9uX19tZXNzYWdlX190ZXh0LCAubG9naW5fX3NlY3Rpb25fX3RpdGxlc19fc3ViLCAuY29udGFjdF9fc2VjdGlvbl9fbWVzc2FnZV9fdGV4dCwgLmZvcm1fX2xpc3RfX2l0ZW1fX3RleHRhcmVhLCAuZm9ybV9fbGlzdF9faXRlbV9faW5wdXQge1xuICBmb250LWZhbWlseTogXCJVYnVudHUsIHNhbnMtc2VyaWZcIjtcbiAgZm9udC1zaXplOiAxLjhyZW07XG59XG5cbi5uYXZfX2xpbmtzX19pdGVtX19saW5rIHtcbiAgZm9udC1mYW1pbHk6IFwiVWJ1bnR1LCBzYW5zLXNlcmlmXCI7XG4gIGZvbnQtc2l6ZTogMi40cmVtO1xufVxuXG4ubGluaywgLmhvbWVfX3dlbGNvbWVfX3RpdGxlX190ZXh0LCAuYWN0aXZlLCAuaGVhZGVyX190aXRsZV9fdGV4dCB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xufVxuXG4vKlxuICBIT1JJWk9OVEFMIExJTkUgQU5JTUFUSU9OLlxuKi9cbi5saW5rOmFmdGVyLCAuaG9tZV9fd2VsY29tZV9fdGl0bGVfX3RleHQ6YWZ0ZXIsIC5hY3RpdmU6YWZ0ZXIsIC5oZWFkZXJfX3RpdGxlX190ZXh0OmFmdGVyIHtcbiAgY29udGVudDogXCJcIjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IC0ycmVtO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAycHg7XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg5MGRlZywgcmdiKDAsIDAsIDApIDIwJSwgcmdiKDI1NSwgNDIsIDExMikgNTAlLCByZ2IoMCwgMCwgMCkgODAlKTtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuN3MgZWFzZS1pbi1vdXQ7XG59XG5cbi5saW5rOmhvdmVyOmFmdGVyLCAuaG9tZV9fd2VsY29tZV9fdGl0bGVfX3RleHQ6YWZ0ZXIsIC5hY3RpdmU6YWZ0ZXIsIC5oZWFkZXJfX3RpdGxlX190ZXh0OmFmdGVyIHtcbiAgdHJhbnNmb3JtOiBzY2FsZVgoMSk7XG4gIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XG59XG5cbi5saW5rOmFmdGVyIHtcbiAgdHJhbnNmb3JtOiBzY2FsZVgoMCk7XG4gIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XG59XG5cbi5ob21lX193ZWxjb21lX190aXRsZV9fdGV4dCwgLmFjdGl2ZSwgLmhlYWRlcl9fdGl0bGVfX3RleHQge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG4ubGluayB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cbi5yZWdpc3RlciwgLmxvZ2luLCAuY29udGFjdCB7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHotaW5kZXg6IDE7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbi5yZWdpc3Rlcl9fc2VjdGlvbiwgLmxvZ2luX19zZWN0aW9uLCAuY29udGFjdF9fc2VjdGlvbiB7XG4gIHBhZGRpbmc6IDguOHJlbSAwO1xuICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gIGp1c3RpZnktc2VsZjogY2VudGVyO1xufVxuXG4uaGVhZGVyIHtcbiAgaGVpZ2h0OiAzOS42cmVtO1xuICB3aWR0aDogMTAwJTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuLmhlYWRlcl9fYmcge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG4uaGVhZGVyX19iZ19faW1nIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgb2JqZWN0LWZpdDogY292ZXI7XG4gIG9iamVjdC1wb3NpdGlvbjogdG9wO1xufVxuLmhlYWRlcl9fYmdfX292ZXJsYXkge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjc5MjE1Njg2MjcpO1xufVxuLmhlYWRlcl9fdGl0bGUge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNjUlO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4uaGVhZGVyX190aXRsZV9fdGV4dCB7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG59XG5cbi5mb3JtIHtcbiAgd2lkdGg6IDcwLjRyZW07XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xufVxuLmZvcm1fX2xpc3RfX2l0ZW0ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtYXJnaW46IDNyZW07XG59XG4uZm9ybV9fbGlzdF9faXRlbV9faW5wdXQge1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgYm9yZGVyOiAxcHggc29saWQ7XG4gIGJvcmRlci1jb2xvcjogI2ZmZmZmZjtcbiAgY29sb3I6ICNmZmZmZmY7XG4gIHBhZGRpbmc6IDMuMnJlbSAyLjRyZW07XG4gIHdpZHRoOiAxMDAlO1xufVxuLmZvcm1fX2xpc3RfX2l0ZW1fX2lucHV0OjpwbGFjZWhvbGRlciB7XG4gIGNvbG9yOiAjZmZmZmZmO1xufVxuLmZvcm1fX2xpc3RfX2l0ZW1fX3RleHRhcmVhIHtcbiAgaGVpZ2h0OiAzNS42cmVtO1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgYm9yZGVyOiAxcHggc29saWQ7XG4gIGJvcmRlci1jb2xvcjogI2ZmZmZmZjtcbiAgY29sb3I6ICNmZmZmZmY7XG4gIHBhZGRpbmc6IDMuMnJlbSAyLjRyZW07XG4gIHdpZHRoOiAxMDAlO1xufVxuLmZvcm1fX2xpc3RfX2l0ZW1fX3RleHRhcmVhOjpwbGFjZWhvbGRlciB7XG4gIGNvbG9yOiAjZmZmZmZmO1xufVxuLmZvcm1fX2xpc3RfX2l0ZW1fX2J1dHRvbiB7XG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICB3aWR0aDogMThyZW07XG4gIGhlaWdodDogNi4xcmVtO1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgYm9yZGVyOiAxcHggc29saWQ7XG4gIGJvcmRlci1jb2xvcjogI2ZmZmZmZjtcbiAgYm9yZGVyLXJpZ2h0OiBub25lO1xuICBib3JkZXItbGVmdDogbm9uZTtcbiAgcGFkZGluZzogMnJlbSAxLjhyZW07XG4gIGNvbG9yOiAjZmZmZmZmO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJVYnVudHUsIHNhbnMtc2VyaWZcIjtcbiAgc3JjOiB1cmwoXCIuLi9mb250cy9VYnVudHUtTWVkaXVtLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCIuLi9mb250cy9VYnVudHUtTWVkaXVtLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG4qIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG59XG5cbjo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICB3aWR0aDogMTBweDtcbn1cblxuOjotd2Via2l0LXNjcm9sbGJhci10cmFjayB7XG4gIGJhY2tncm91bmQ6ICMwMDAwMDA7XG59XG5cbjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuICBiYWNrZ3JvdW5kOiAjZmYyYTcwO1xuICBib3JkZXItcmFkaXVzOiAycHg7XG59XG5cbjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6aG92ZXIge1xuICBiYWNrZ3JvdW5kOiAjZmYyYTcwO1xufVxuXG5odG1sIHtcbiAgZm9udC1zaXplOiAwLjUyMDgzMzMzMzN2dztcbiAgb3ZlcnNjcm9sbC1iZWhhdmlvcjogbm9uZTtcbiAgYmFja2dyb3VuZDogIzAwMDAwMDtcbiAgY29sb3I6ICNmZmZmZmY7XG59XG5AbWVkaWEgKG1heC13aWR0aDogNzY3cHgpIHtcbiAgaHRtbCB7XG4gICAgZm9udC1zaXplOiAxLjMwMjA4MzMzMzN2dztcbiAgfVxufVxuXG5ib2R5IHtcbiAgZm9udC1mYW1pbHk6IFwiVWJ1bnR1LCBzYW5zLXNlcmlmXCI7XG59XG5cbmEge1xuICBjb2xvcjogaW5oZXJpdDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBvdXRsaW5lOiBub25lO1xufVxuXG5pbWcge1xuICBvcGFjaXR5OiAwO1xuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuNXMgZWFzZTtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbn1cbmltZy5sb2FkZWQge1xuICBvcGFjaXR5OiAxO1xufVxuXG4ucHJlbG9hZGVyIHtcbiAgYmFja2dyb3VuZDogIzAwMDAwMDtcbiAgZGlzcGxheTogZ3JpZDtcbiAgcGxhY2UtY29udGVudDogY2VudGVyO1xuICB6LWluZGV4OiA1O1xuICBkaXNwbGF5OiBub25lO1xufVxuLnByZWxvYWRlcl9faW1nIHtcbiAgaGVpZ2h0OiA1cmVtO1xuICB3aWR0aDogNXJlbTtcbn1cblxuLm5hdiB7XG4gIHotaW5kZXg6IDQ7XG4gIGJhY2tncm91bmQ6ICNmZjJhNzA7XG4gIGhlaWdodDogMTIuNHJlbTtcbiAgd2lkdGg6IDEwMCU7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xufVxuLm5hdl9fd3JhcHBlciB7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIGJhY2tncm91bmQ6ICMwMDAwMDA7XG4gIGJvcmRlcjogMnB4IHNvbGlkICNmZjJhNzA7XG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA0MHB4O1xuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiA0MHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbi5uYXZfX2xpbmtzIHtcbiAgZGlzcGxheTogZmxleDtcbn1cbi5uYXZfX2xpbmtzX19pdGVtIHtcbiAgbWFyZ2luOiAwIDIuNHJlbTtcbn1cbi5uYXZfX2xpbmtzX19pdGVtX19saW5rIHtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbn1cblxuLmFjdGl2ZSB7XG4gIGNvbG9yOiAjZmYyYTcwO1xufVxuXG4uZm9vdGVyIHtcbiAgaGVpZ2h0OiA4MHJlbTtcbiAgd2lkdGg6IDEwMCU7XG59XG4uZm9vdGVyX19iYWNrZ3JvdW5kIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuLmZvb3Rlcl9fYmFja2dyb3VuZF9faW1nIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgb2JqZWN0LWZpdDogY292ZXI7XG59XG4uZm9vdGVyX19iYWNrZ3JvdW5kX19vdmVybGF5IHtcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjg5MDE5NjA3ODQpO1xufVxuXG4uaG9tZSB7XG4gIHotaW5kZXg6IDE7XG59XG4uaG9tZV9faGVhZGVyIHtcbiAgaGVpZ2h0OiA5MHJlbTtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMmZyIDFmcjtcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMywgMWZyKTtcbn1cbi5ob21lX19oZWFkZXJfX2JnIHtcbiAgZ3JpZC1hcmVhOiAxLzEvLTEvLTE7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG59XG4uaG9tZV9faGVhZGVyX19iZ19faW1nIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgb2JqZWN0LWZpdDogY292ZXI7XG59XG4uaG9tZV9faGVhZGVyX190aXRsZXMge1xuICBncmlkLWFyZWE6IDIvMi8zLzM7XG4gIGp1c3RpZnktc2VsZjogY2VudGVyO1xuICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbi5ob21lX19oZWFkZXJfX3RpdGxlc19fbWFpbiB7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIG9iamVjdC1maXQ6IGNvdmVyO1xufVxuLmhvbWVfX2hlYWRlcl9fdGl0bGVzX190ZXh0IHtcbiAgd2lkdGg6IDEwMCU7XG4gIGxldHRlci1zcGFjaW5nOiAzcmVtO1xuICBtYXJnaW4tdG9wOiAycmVtO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xufVxuLmhvbWVfX2hlYWRlcl9fdGl0bGVzX19idG0ge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBvYmplY3QtZml0OiBjb3Zlcjtcbn1cbi5ob21lX193ZWxjb21lIHtcbiAgbWFyZ2luOiAxNXJlbSAwO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xufVxuLmhvbWVfX3dlbGNvbWVfX3RpdGxlIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuLmhvbWVfX3dlbGNvbWVfX3RpdGxlX190ZXh0IHtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbn1cbi5ob21lX193ZWxjb21lX19zZWN0aW9ucyB7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDEwcmVtIDI0cmVtO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAzcmVtO1xufVxuLmhvbWVfX3dlbGNvbWVfX3NlY3Rpb25zX19zZWN0aW9uIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuLmhvbWVfX3dlbGNvbWVfX3NlY3Rpb25zX19zZWN0aW9uX19pbWcge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBvYmplY3QtZml0OiBjb3Zlcjtcbn1cbi5ob21lX193ZWxjb21lX19zZWN0aW9uc19fc2VjdGlvbl9fb3ZlcmxheSB7XG4gIG9wYWNpdHk6IDA7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBib3JkZXItdG9wOiAycHggc29saWQgI2ZmMmE3MDtcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNmZjJhNzA7XG4gIGJhY2tncm91bmQ6ICMwMDAwMDA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlLWluLW91dDtcbn1cbi5ob21lX193ZWxjb21lX19zZWN0aW9uc19fc2VjdGlvbl9fb3ZlcmxheTpob3ZlciB7XG4gIG9wYWNpdHk6IDE7XG59XG4uaG9tZV9fd2VsY29tZV9fc2VjdGlvbnNfX3NlY3Rpb25fX292ZXJsYXlfX2ljb24ge1xuICBoZWlnaHQ6IDEwcmVtO1xuICB3aWR0aDogMTByZW07XG4gIHBhZGRpbmc6IDJyZW07XG4gIGJvcmRlcjogMXB4IHNvbGlkICNmZjJhNzA7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbn1cbi5ob21lX193ZWxjb21lX19zZWN0aW9uc19fc2VjdGlvbl9fb3ZlcmxheV9faWNvbl9faW1nIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgb2JqZWN0LWZpdDogY292ZXI7XG59XG4uaG9tZV9fd2VsY29tZV9fc2VjdGlvbnNfX3NlY3Rpb25fX292ZXJsYXlfX3RpdGxlIHtcbiAgbWFyZ2luOiAyLjVyZW0gMDtcbn1cbi5ob21lX193ZWxjb21lX19zZWN0aW9uc19fc2VjdGlvbl9fb3ZlcmxheV9fdGl0bGVfX3RleHQge1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xufVxuLmhvbWVfX3dlbGNvbWVfX3NlY3Rpb25zX19zZWN0aW9uX19vdmVybGF5X19kZXNjIHtcbiAgcGFkZGluZzogMCA1cmVtO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4uaG9tZV9fd2VsY29tZV9fc2VjdGlvbnNfX3NlY3Rpb25fX292ZXJsYXlfX2Rlc2NfX3RleHQge1xuICBsaW5lLWhlaWdodDogMi4ycmVtO1xufVxuXG4uY29udGFjdF9fc2VjdGlvbl9fbWVzc2FnZSB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbi5jb250YWN0IC5mb3JtIHtcbiAgaGVpZ2h0OiA2NS45cmVtO1xufVxuXG4ucmVkIHtcbiAgY29sb3I6ICNmZjJhNzA7XG59XG5cbi5sb2dpbiAuZm9ybSB7XG4gIGhlaWdodDogMjcuOXJlbTtcbiAgbWFyZ2luOiA1cmVtIDAgMTByZW0gMDtcbn1cbi5sb2dpbl9fc2VjdGlvbiB7XG4gIGhlaWdodDogNjRyZW07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuLmxvZ2luX19zZWN0aW9uX190aXRsZXMge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4ubG9naW5fX3NlY3Rpb25fX3RpdGxlc19fbWFpbiB7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGxldHRlci1zcGFjaW5nOiAwLjE4cmVtO1xufVxuLmxvZ2luX19zZWN0aW9uX190aXRsZXNfX3N1YiB7XG4gIG1hcmdpbi10b3A6IDJyZW07XG4gIGxpbmUtaGVpZ2h0OiAzLjI0cmVtO1xufVxuLmxvZ2luX19zZWN0aW9uX19tZXNzYWdlIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuLmxvZ2luX19zZWN0aW9uX19tZXNzYWdlX190ZXh0IGEge1xuICBjb2xvcjogI2ZmMmE3MDtcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG59XG5cbi5yZWQge1xuICBjb2xvcjogI2ZmMmE3MDtcbn1cblxuLmhlbHAge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogOTAlO1xuICBsZWZ0OiAyMHJlbTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuICBvcGFjaXR5OiAwO1xufVxuLmhlbHBfX2luZm8ge1xuICBsaW5lLWhlaWdodDogMi41cmVtO1xuICBsZXR0ZXItc3BhY2luZzogMC4ycmVtO1xufVxuXG4ucmVnaXN0ZXIgLmZvcm0ge1xuICBoZWlnaHQ6IDQ5LjdyZW07XG4gIG1hcmdpbjogMnJlbSAwIDEwcmVtIDA7XG59XG4ucmVnaXN0ZXJfX3NlY3Rpb24ge1xuICBoZWlnaHQ6IDgwcmVtO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbi5yZWdpc3Rlcl9fc2VjdGlvbl9fdGl0bGVzIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuLnJlZ2lzdGVyX19zZWN0aW9uX190aXRsZXNfX21haW4ge1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsZXR0ZXItc3BhY2luZzogMC4xOHJlbTtcbn1cbi5yZWdpc3Rlcl9fc2VjdGlvbl9fdGl0bGVzX19zdWIge1xuICBtYXJnaW4tdG9wOiAycmVtO1xuICBsaW5lLWhlaWdodDogMy4yNHJlbTtcbn0iLCIlY292ZXJcclxue1xyXG4gIGhlaWdodDogMTAwJTtcclxuICB3aWR0aDogMTAwJTtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgdG9wOiAwO1xyXG4gIGxlZnQ6IDA7XHJcbn1cclxuXHJcbiVjZW50ZXJcclxue1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxufVxyXG5cclxuQG1peGluIHJhdGlvICgkaGVpZ2h0LCAkd2lkdGgpXHJcbntcclxuICBmb250LXNpemU6IDA7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcblxyXG4gICY6YWZ0ZXJcclxuICB7XHJcbiAgICBjb250ZW50OiAnJztcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIHBhZGRpbmctdG9wOiAkd2lkdGggLyAkaGVpZ2h0ICogMTAwJTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxufVxyXG4iLCIvKiBSZWNvbW1lbmRlZCBzdHlsZXMgZm9yIFNwbGl0dGluZyAqL1xyXG4uc3BsaXR0aW5nIC53b3JkLFxyXG4uc3BsaXR0aW5nIC5jaGFyIHtcclxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbn1cclxuXHJcbi8qIFBzdWVkby1lbGVtZW50IGNoYXJzICovXHJcbi5zcGxpdHRpbmcgLmNoYXIge1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFBvcHVsYXRlIHRoZSBwc3VlZG8gZWxlbWVudHMgd2l0aCB0aGUgY2hhcmFjdGVyIHRvIGFsbG93IGZvciBleHBhbmRlZCBlZmZlY3RzXHJcbiAqIFNldCB0byBgZGlzcGxheTogbm9uZWAgYnkgZGVmYXVsdDsganVzdCBhZGQgYGRpc3BsYXk6IGJsb2NrYCB3aGVuIHlvdSB3YW50XHJcbiAqIHRvIHVzZSB0aGUgcHN1ZWRvIGVsZW1lbnRzXHJcbiAqL1xyXG4uc3BsaXR0aW5nIC5jaGFyOjpiZWZvcmUsXHJcbi5zcGxpdHRpbmcgLmNoYXI6OmFmdGVyIHtcclxuICBjb250ZW50OiBhdHRyKGRhdGEtY2hhcik7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRvcDogMDtcclxuICBsZWZ0OiAwO1xyXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICB0cmFuc2l0aW9uOiBpbmhlcml0O1xyXG4gIHVzZXItc2VsZWN0OiBub25lO1xyXG59XHJcblxyXG4vKiBFeHBhbmRlZCBDU1MgVmFyaWFibGVzICovXHJcblxyXG4uc3BsaXR0aW5nIHtcclxuICAvKiBUaGUgY2VudGVyIHdvcmQgaW5kZXggKi9cclxuICAtLXdvcmQtY2VudGVyOiBjYWxjKCh2YXIoLS13b3JkLXRvdGFsKSAtIDEpIC8gMik7XHJcblxyXG4gIC8qIFRoZSBjZW50ZXIgY2hhcmFjdGVyIGluZGV4ICovXHJcbiAgLS1jaGFyLWNlbnRlcjogY2FsYygodmFyKC0tY2hhci10b3RhbCkgLSAxKSAvIDIpO1xyXG5cclxuICAvKiBUaGUgY2VudGVyIGNoYXJhY3RlciBpbmRleCAqL1xyXG4gIC0tbGluZS1jZW50ZXI6IGNhbGMoKHZhcigtLWxpbmUtdG90YWwpIC0gMSkgLyAyKTtcclxufVxyXG5cclxuLnNwbGl0dGluZyAud29yZCB7XHJcbiAgLyogUGVjZW50ICgwLTEpIG9mIHRoZSB3b3JkJ3MgcG9zaXRpb24gKi9cclxuICAtLXdvcmQtcGVyY2VudDogY2FsYyh2YXIoLS13b3JkLWluZGV4KSAvIHZhcigtLXdvcmQtdG90YWwpKTtcclxuXHJcbiAgLyogUGVjZW50ICgwLTEpIG9mIHRoZSBsaW5lJ3MgcG9zaXRpb24gKi9cclxuICAtLWxpbmUtcGVyY2VudDogY2FsYyh2YXIoLS1saW5lLWluZGV4KSAvIHZhcigtLWxpbmUtdG90YWwpKTtcclxufVxyXG5cclxuLnNwbGl0dGluZyAuY2hhciB7XHJcbiAgLyogUGVyY2VudCAoMC0xKSBvZiB0aGUgY2hhcidzIHBvc2l0aW9uICovXHJcbiAgLS1jaGFyLXBlcmNlbnQ6IGNhbGModmFyKC0tY2hhci1pbmRleCkgLyB2YXIoLS1jaGFyLXRvdGFsKSk7XHJcblxyXG4gIC8qIE9mZnNldCBmcm9tIGNlbnRlciwgcG9zaXRpdmUgJiBuZWdhdGl2ZSAqL1xyXG4gIC0tY2hhci1vZmZzZXQ6IGNhbGModmFyKC0tY2hhci1pbmRleCkgLSB2YXIoLS1jaGFyLWNlbnRlcikpO1xyXG5cclxuICAvKiBBYnNvbHV0ZSBkaXN0YW5jZSBmcm9tIGNlbnRlciwgb25seSBwb3NpdGl2ZSAqL1xyXG4gIC0tZGlzdGFuY2U6IGNhbGMoXHJcbiAgICAgKHZhcigtLWNoYXItb2Zmc2V0KSAqIHZhcigtLWNoYXItb2Zmc2V0KSkgLyB2YXIoLS1jaGFyLWNlbnRlcilcclxuICApO1xyXG5cclxuICAvKiBEaXN0YW5jZSBmcm9tIGNlbnRlciB3aGVyZSAtMSBpcyB0aGUgZmFyIGxlZnQsIDAgaXMgY2VudGVyLCAxIGlzIGZhciByaWdodCAqL1xyXG4gIC0tZGlzdGFuY2Utc2luZTogY2FsYyh2YXIoLS1jaGFyLW9mZnNldCkgLyB2YXIoLS1jaGFyLWNlbnRlcikpO1xyXG5cclxuICAvKiBEaXN0YW5jZSBmcm9tIGNlbnRlciB3aGVyZSAxIGlzIGZhciBsZWZ0L2ZhciByaWdodCwgMCBpcyBjZW50ZXIgKi9cclxuICAtLWRpc3RhbmNlLXBlcmNlbnQ6IGNhbGMoKHZhcigtLWRpc3RhbmNlKSAvIHZhcigtLWNoYXItY2VudGVyKSkpO1xyXG59XHJcblxyXG4uc3BsaXR0aW5nLmNlbGxzIGltZyB7IHdpZHRoOiAxMDAlOyBkaXNwbGF5OiBibG9jazsgfVxyXG5cclxuQHN1cHBvcnRzICggZGlzcGxheTogZ3JpZCApIHtcclxuICAuc3BsaXR0aW5nLmNlbGxzIHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gIH1cclxuXHJcbiAgLnNwbGl0dGluZyAuY2VsbC1ncmlkIHtcclxuICAgIGJhY2tncm91bmQ6IGluaGVyaXQ7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgZ3JpZC10ZW1wbGF0ZTogcmVwZWF0KCB2YXIoLS1yb3ctdG90YWwpLCAxZnIgKSAvIHJlcGVhdCggdmFyKC0tY29sLXRvdGFsKSwgMWZyICk7XHJcbiAgfVxyXG5cclxuICAuc3BsaXR0aW5nIC5jZWxsIHtcclxuICAgIGJhY2tncm91bmQ6IGluaGVyaXQ7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIH1cclxuXHJcbiAgLnNwbGl0dGluZyAuY2VsbC1pbm5lciB7XHJcbiAgICBiYWNrZ3JvdW5kOiBpbmhlcml0O1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcclxuICAgIC8qIFNpemUgdG8gZml0IHRoZSB3aG9sZSBjb250YWluZXIgc2l6ZSAqL1xyXG4gICAgd2lkdGg6IGNhbGMoMTAwJSAqIHZhcigtLWNvbC10b3RhbCkpO1xyXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgKiB2YXIoLS1yb3ctdG90YWwpKTtcclxuICAgIC8qIFBvc2l0aW9uIHByb3Blcmx5ICovXHJcbiAgICBsZWZ0OiBjYWxjKC0xMDAlICogdmFyKC0tY29sLWluZGV4KSk7XHJcbiAgICB0b3A6IGNhbGMoLTEwMCUgKiB2YXIoLS1yb3ctaW5kZXgpKTtcclxuICB9XHJcblxyXG4gIC8qIEhlbHBlciB2YXJpYWJsZXMgZm9yIGFkdmFuY2VkIGVmZmVjdHMgKi9cclxuICAuc3BsaXR0aW5nIC5jZWxsIHtcclxuICAgIC0tY2VudGVyLXg6IGNhbGMoKHZhcigtLWNvbC10b3RhbCkgLSAxKSAvIDIpO1xyXG4gICAgLS1jZW50ZXIteTogY2FsYygodmFyKC0tcm93LXRvdGFsKSAtIDEpIC8gMik7XHJcblxyXG4gICAgLyogT2Zmc2V0IGZyb20gY2VudGVyLCBwb3NpdGl2ZSAmIG5lZ2F0aXZlICovXHJcbiAgICAtLW9mZnNldC14OiBjYWxjKHZhcigtLWNvbC1pbmRleCkgLSB2YXIoLS1jZW50ZXIteCkpO1xyXG4gICAgLS1vZmZzZXQteTogY2FsYyh2YXIoLS1yb3ctaW5kZXgpIC0gdmFyKC0tY2VudGVyLXkpKTtcclxuXHJcbiAgICAvKiBBYnNvbHV0ZSBkaXN0YW5jZSBmcm9tIGNlbnRlciwgb25seSBwb3NpdGl2ZSAqL1xyXG4gICAgLS1kaXN0YW5jZS14OiBjYWxjKCAodmFyKC0tb2Zmc2V0LXgpICogdmFyKC0tb2Zmc2V0LXgpKSAvIHZhcigtLWNlbnRlci14KSApO1xyXG5cclxuICAgIC8qIEFic29sdXRlIGRpc3RhbmNlIGZyb20gY2VudGVyLCBvbmx5IHBvc2l0aXZlICovXHJcbiAgICAtLWRpc3RhbmNlLXk6IGNhbGMoICh2YXIoLS1vZmZzZXQteSkgKiB2YXIoLS1vZmZzZXQteSkpIC8gdmFyKC0tY2VudGVyLXkpICk7XHJcbiAgfVxyXG59XHJcbiIsIiV0aXRsZS0yMFxue1xuICBmb250LWZhbWlseTogJGZvbnQtbWU7XG4gIGZvbnQtc2l6ZTogMi4wcmVtO1xufVxuXG4ldGl0bGUtMjRcbntcbiAgZm9udC1mYW1pbHk6ICRmb250LW1lO1xuICBmb250LXNpemU6IDIuNHJlbTtcbn1cblxuJXRpdGxlLTMyXG57XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1tZTtcbiAgZm9udC1zaXplOiAzLjJyZW07XG59XG5cbiV0aXRsZS0zOFxue1xuICBmb250LWZhbWlseTogJGZvbnQtbWU7XG4gIGZvbnQtc2l6ZTogMy44cmVtO1xufVxuIiwiJGNvbG9yLWJhY2tncm91bmQ6ICMwMDAwMDA7XG4kY29sb3ItdGV4dDogI2ZmZmZmZjtcbiRjb2xvci1yZWQ6ICNmZjJhNzA7XG5cbiRmb250LW1lOiAnVWJ1bnR1LCBzYW5zLXNlcmlmJztcblxuJHotaW5kZXhlczogKFxuICAncHJlbG9hZGVyJyxcbiAgJ25hdmlnYXRpb24nLFxuICAnbW9kYWwnLFxuICAnbGluaycsXG4gICdjb250ZW50Jyxcbik7XG4iLCIlZGVzYy0xMFxue1xuICBmb250LWZhbWlseTogJGZvbnQtbWU7XG4gIGZvbnQtc2l6ZTogMS4wcmVtO1xufVxuXG4lZGVzYy0xMlxue1xuICBmb250LWZhbWlseTogJGZvbnQtbWU7XG4gIGZvbnQtc2l6ZTogMS4ycmVtO1xufVxuXG4lZGVzYy0xNFxue1xuICBmb250LWZhbWlseTogJGZvbnQtbWU7XG4gIGZvbnQtc2l6ZTogMS40cmVtO1xufVxuXG4lZGVzYy0xNlxue1xuICBmb250LWZhbWlseTogJGZvbnQtbWU7XG4gIGZvbnQtc2l6ZTogMS42cmVtO1xufVxuXG4lZGVzYy0xOFxue1xuICBmb250LWZhbWlseTogJGZvbnQtbWU7XG4gIGZvbnQtc2l6ZTogMS44cmVtO1xufVxuXG4lZGVzYy0yMFxue1xuICBmb250LWZhbWlseTogJGZvbnQtbWU7XG4gIGZvbnQtc2l6ZTogMi4wcmVtO1xufVxuXG4lZGVzYy0yMlxue1xuICBmb250LWZhbWlseTogJGZvbnQtbWU7XG4gIGZvbnQtc2l6ZTogMi4ycmVtO1xufVxuXG4lZGVzYy0yNFxue1xuICBmb250LWZhbWlseTogJGZvbnQtbWU7XG4gIGZvbnQtc2l6ZTogMi40cmVtO1xufVxuXG4lZGVzYy0yNlxue1xuICBmb250LWZhbWlseTogJGZvbnQtbWU7XG4gIGZvbnQtc2l6ZTogMi42cmVtO1xufVxuIiwiJWxpbmtfX3dyYXBwZXJcbntcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAvL292ZXJmbG93OiBoaWRkZW47XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcbn1cblxuLypcbiAgSE9SSVpPTlRBTCBMSU5FIEFOSU1BVElPTi5cbiovXG5cbiVsaW5rX19saW5lX19jZW50ZXJcbntcbiAgY29udGVudDogJyc7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYm90dG9tOiAtMnJlbTtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMnB4O1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXG4gICAgOTBkZWcsXG4gICAgcmdiYSgwLDAsMCwxKSAyMCUsXG4gICAgcmdiYSgyNTUsNDIsMTEyLDEpIDUwJSxcbiAgICByZ2JhKDAsMCwwLDEpIDgwJSk7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjdzIGVhc2UtaW4tb3V0O1xufVxuXG4lbGlua19fbGluZV9fY2VudGVyLS12aXNpYmxlXG57XG4gIHRyYW5zZm9ybTogc2NhbGVYKDEpO1xuICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyO1xufVxuXG4lbGlua19fbGluZV9fY2VudGVyLS1oaWRkZW5cbntcbiAgdHJhbnNmb3JtOiBzY2FsZVgoMCk7XG4gIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XG59XG5cbiVsaW5rX19jZW50ZXJcbntcbiAgQGV4dGVuZCAlbGlua19fd3JhcHBlcjtcblxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cbiAgJjphZnRlclxuICB7XG4gICAgQGV4dGVuZCAlbGlua19fbGluZV9fY2VudGVyO1xuICAgIEBleHRlbmQgJWxpbmtfX2xpbmVfX2NlbnRlci0tdmlzaWJsZTtcbiAgfVxufVxuXG4lbGlua19fY2VudGVyLS1oaWRkZW5cbntcbiAgQGV4dGVuZCAlbGlua19fd3JhcHBlcjtcblxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cbiAgJjphZnRlclxuICB7XG4gICAgQGV4dGVuZCAlbGlua19fbGluZV9fY2VudGVyO1xuICAgIEBleHRlbmQgJWxpbmtfX2xpbmVfX2NlbnRlci0taGlkZGVuO1xuICB9XG5cbiAgJjpob3ZlclxuICB7XG5cbiAgICAmOmFmdGVyXG4gICAge1xuICAgICAgQGV4dGVuZCAlbGlua19fbGluZV9fY2VudGVyLS12aXNpYmxlO1xuICAgIH1cbiAgfVxufVxuIiwiJXBhZ2VcbntcbiAgQGV4dGVuZCAlY292ZXI7XG5cbiAgb3BhY2l0eTogMDtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xufVxuXG4lcGFnZV9fd3JhcHBlclxue1xuICBjb2xvcjogaW5oZXJpdDtcbn1cblxuJXBhZ2VfX21haW5cbntcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcblxuICB6LWluZGV4OiB6KCdjb250ZW50Jyk7XG5cbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuJXBhZ2VfX3NlY3Rpb25cbntcbiAgcGFkZGluZzogOC44cmVtIDA7XG5cbiAgYWxpZ24tc2VsZjogY2VudGVyO1xuICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcbn1cblxuLmhlYWRlclxue1xuICBoZWlnaHQ6IDM5LjZyZW07XG4gIHdpZHRoOiAxMDAlO1xuXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAmX19iZ1xuICB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gICAgJl9faW1nXG4gICAge1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgd2lkdGg6IDEwMCU7XG5cbiAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgb2JqZWN0LXBvc2l0aW9uOiB0b3A7XG4gICAgfVxuXG4gICAgJl9fb3ZlcmxheVxuICAgIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHRvcDogMDtcbiAgICAgIGxlZnQ6IDA7XG5cbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgICBiYWNrZ3JvdW5kOiAjMDAwMDAwY2E7XG4gICAgfVxuICB9XG5cbiAgJl9fdGl0bGVcbiAge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDY1JTtcbiAgICBsZWZ0OiA1MCU7XG5cbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZShcbiAgICAgIC01MCUsXG4gICAgICAtNTAlXG4gICAgKTtcblxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAgICZfX3RleHRcbiAgICB7XG4gICAgICBAZXh0ZW5kICV0aXRsZS0zODtcbiAgICAgIEBleHRlbmQgJWxpbmtfX2NlbnRlcjtcblxuICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICB9XG4gIH1cbn1cbiIsIi5mb3JtXG57XG4gIHdpZHRoOiA3MC40cmVtO1xuXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuXG4gICZfX2xpc3RcbiAge1xuXG4gICAgJl9faXRlbVxuICAgIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXG4gICAgICBtYXJnaW46IDNyZW07XG5cbiAgICAgICZfX2lucHV0XG4gICAgICB7XG4gICAgICAgIEBleHRlbmQgJWRlc2MtMTg7XG5cbiAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkO1xuICAgICAgICBib3JkZXItY29sb3I6ICRjb2xvci10ZXh0O1xuICAgICAgICBjb2xvcjogJGNvbG9yLXRleHQ7XG4gICAgICAgIHBhZGRpbmc6IDMuMnJlbSAyLjRyZW07XG5cbiAgICAgICAgd2lkdGg6IDEwMCU7XG5cbiAgICAgICAgJjo6cGxhY2Vob2xkZXJcbiAgICAgICAge1xuICAgICAgICAgIGNvbG9yOiAkY29sb3ItdGV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAmX190ZXh0YXJlYVxuICAgICAge1xuICAgICAgICBAZXh0ZW5kICVkZXNjLTE4O1xuXG4gICAgICAgIGhlaWdodDogMzUuNnJlbTtcbiAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkO1xuICAgICAgICBib3JkZXItY29sb3I6ICRjb2xvci10ZXh0O1xuICAgICAgICBjb2xvcjogJGNvbG9yLXRleHQ7XG4gICAgICAgIHBhZGRpbmc6IDMuMnJlbSAyLjRyZW07XG5cbiAgICAgICAgd2lkdGg6IDEwMCU7XG5cbiAgICAgICAgJjo6cGxhY2Vob2xkZXJcbiAgICAgICAge1xuICAgICAgICAgIGNvbG9yOiAkY29sb3ItdGV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAmX19idXR0b25cbiAgICAgIHtcbiAgICAgICAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XG5cbiAgICAgICAgd2lkdGg6IDE4cmVtO1xuICAgICAgICBoZWlnaHQ6IDYuMXJlbTtcblxuICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcblxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZDtcbiAgICAgICAgYm9yZGVyLWNvbG9yOiAkY29sb3ItdGV4dDtcbiAgICAgICAgYm9yZGVyLXJpZ2h0OiBub25lO1xuICAgICAgICBib3JkZXItbGVmdDogbm9uZTtcblxuICAgICAgICBwYWRkaW5nOiAycmVtIDEuOHJlbTtcblxuICAgICAgICBjb2xvcjogJGNvbG9yLXRleHQ7XG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4iLCJAZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICRmb250LW1lO1xuICBzcmM6IHVybCgnLi4vZm9udHMvVWJ1bnR1LU1lZGl1bS53b2ZmMicpIGZvcm1hdCgnd29mZjInKSxcbiAgICAgIHVybCgnLi4vZm9udHMvVWJ1bnR1LU1lZGl1bS53b2ZmJykgZm9ybWF0KCd3b2ZmJyk7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuIiwiKlxue1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB1c2VyLXNlbGVjdDogbm9uZTtcbn1cblxuOjotd2Via2l0LXNjcm9sbGJhciB7XG4gIHdpZHRoOiAxMHB4O1xufVxuXG46Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcbiAgYmFja2dyb3VuZDogJGNvbG9yLWJhY2tncm91bmQ7XG59XG5cbjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuICBiYWNrZ3JvdW5kOiAkY29sb3ItcmVkO1xuICBib3JkZXItcmFkaXVzOiAycHg7XG59XG5cbjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6aG92ZXIge1xuICBiYWNrZ3JvdW5kOiAkY29sb3ItcmVkO1xufVxuXG5odG1sXG57XG4gIEBleHRlbmQgJWNvdmVyO1xuXG4gIGZvbnQtc2l6ZTogY2FsYygxMDB2dyAvIDE5MjBweCAqIDEwcHgpO1xuXG4gIG92ZXJzY3JvbGwtYmVoYXZpb3I6IG5vbmU7XG5cbiAgYmFja2dyb3VuZDogJGNvbG9yLWJhY2tncm91bmQ7XG4gIGNvbG9yOiAkY29sb3ItdGV4dDtcblxuICBAaW5jbHVkZSBtZWRpYSgnPHBob25lJylcbiAge1xuICAgIGZvbnQtc2l6ZTogY2FsYygxMDB2dyAvIDc2OHB4ICogMTBweCk7XG4gIH1cbn1cblxuYm9keVxue1xuICBAZXh0ZW5kICVkZXNjLTE2O1xuXG4gIGZvbnQtZmFtaWx5OiAkZm9udC1tZTtcbn1cblxuYVxue1xuICBjb2xvcjogaW5oZXJpdDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBvdXRsaW5lOiBub25lO1xufVxuXG5pbWdcbntcbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAuNXMgZWFzZTtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcblxuICAmLmxvYWRlZFxuICB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxufVxuXG4uY29udGVudFxue1xuXG59XG4iLCIvLyAgICAgXyAgICAgICAgICAgIF8gICAgICAgICAgIF8gICAgICAgICAgICAgICAgICAgICAgICAgICBfIF9cbi8vICAgIChfKSAgICAgICAgICB8IHwgICAgICAgICB8IHwgICAgICAgICAgICAgICAgICAgICAgICAgfCAoXylcbi8vICAgICBfIF8gX18gICBfX198IHxfICAgXyAgX198IHwgX19fICAgXyBfXyBfX18gICBfX18gIF9ffCB8XyAgX18gX1xuLy8gICAgfCB8ICdfIFxcIC8gX198IHwgfCB8IHwvIF9gIHwvIF8gXFwgfCAnXyBgIF8gXFwgLyBfIFxcLyBfYCB8IHwvIF9gIHxcbi8vICAgIHwgfCB8IHwgfCAoX198IHwgfF98IHwgKF98IHwgIF9fLyB8IHwgfCB8IHwgfCAgX18vIChffCB8IHwgKF98IHxcbi8vICAgIHxffF98IHxffFxcX19ffF98XFxfXyxffFxcX18sX3xcXF9fX3wgfF98IHxffCB8X3xcXF9fX3xcXF9fLF98X3xcXF9fLF98XG4vL1xuLy8gICAgICBTaW1wbGUsIGVsZWdhbnQgYW5kIG1haW50YWluYWJsZSBtZWRpYSBxdWVyaWVzIGluIFNhc3Ncbi8vICAgICAgICAgICAgICAgICAgICAgICAgdjIuMC4wXG4vL1xuLy8gICAgICAgIGh0dHBzOi8vZWR1YXJkb2JvdWNhcy5naXRodWIuaW8vaW5jbHVkZS1tZWRpYVxuLy9cbi8vICAgICAgICAgQXV0aG9yczogRWR1YXJkbyBCb3VjYXMgKEBlZHVhcmRvYm91Y2FzKVxuLy8gICAgICAgICAgICAgICAgICBLaXR0eSBHaXJhdWRlbCAoQGtpdHR5Z2lyYXVkZWwpXG4vL1xuLy8gICAgICBUaGlzIHByb2plY3QgaXMgbGljZW5zZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVQgbGljZW5zZVxuQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8vXG4vLy8gaW5jbHVkZS1tZWRpYSBsaWJyYXJ5IHB1YmxpYyBjb25maWd1cmF0aW9uXG4vLy8gQGF1dGhvciBFZHVhcmRvIEJvdWNhc1xuLy8vIEBhY2Nlc3MgcHVibGljXG4vLy8vXG5AdXNlICdzYXNzOm1hdGgnO1xuQHVzZSAnc2FzczptYXAnO1xuQHVzZSAnc2FzczpsaXN0JztcbkB1c2UgJ3Nhc3M6c3RyaW5nJztcbkB1c2UgJ3Nhc3M6bWV0YSc7XG5cbi8vL1xuLy8vIENyZWF0ZXMgYSBsaXN0IG9mIGdsb2JhbCBicmVha3BvaW50c1xuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIENyZWF0ZXMgYSBzaW5nbGUgYnJlYWtwb2ludCB3aXRoIHRoZSBsYWJlbCBgcGhvbmVgXG4vLy8gICRicmVha3BvaW50czogKCdwaG9uZSc6IDMyMHB4KTtcbi8vL1xuJGJyZWFrcG9pbnRzOiAoXG4gICdwaG9uZSc6IDMyMHB4LFxuICAndGFibGV0JzogNzY4cHgsXG4gICdkZXNrdG9wJzogMTAyNHB4LFxuKSAhZGVmYXVsdDtcblxuLy8vXG4vLy8gQ3JlYXRlcyBhIGxpc3Qgb2Ygc3RhdGljIGV4cHJlc3Npb25zIG9yIG1lZGlhIHR5cGVzXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gQ3JlYXRlcyBhIHNpbmdsZSBtZWRpYSB0eXBlIChzY3JlZW4pXG4vLy8gICRtZWRpYS1leHByZXNzaW9uczogKCdzY3JlZW4nOiAnc2NyZWVuJyk7XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gQ3JlYXRlcyBhIHN0YXRpYyBleHByZXNzaW9uIHdpdGggbG9naWNhbCBkaXNqdW5jdGlvbiAoT1Igb3BlcmF0b3IpXG4vLy8gICRtZWRpYS1leHByZXNzaW9uczogKFxuLy8vICAgICdyZXRpbmEyeCc6ICcoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgKG1pbi1yZXNvbHV0aW9uOiAxOTJkcGkpJ1xuLy8vICApO1xuLy8vXG4kbWVkaWEtZXhwcmVzc2lvbnM6IChcbiAgJ3NjcmVlbic6ICdzY3JlZW4nLFxuICAncHJpbnQnOiAncHJpbnQnLFxuICAnaGFuZGhlbGQnOiAnaGFuZGhlbGQnLFxuICAnbGFuZHNjYXBlJzogJyhvcmllbnRhdGlvbjogbGFuZHNjYXBlKScsXG4gICdwb3J0cmFpdCc6ICcob3JpZW50YXRpb246IHBvcnRyYWl0KScsXG4gICdyZXRpbmEyeCc6XG4gICAgJygtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCAobWluLXJlc29sdXRpb246IDE5MmRwaSksIChtaW4tcmVzb2x1dGlvbjogMmRwcHgpJyxcbiAgJ3JldGluYTN4JzpcbiAgICAnKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMyksIChtaW4tcmVzb2x1dGlvbjogMzUwZHBpKSwgKG1pbi1yZXNvbHV0aW9uOiAzZHBweCknLFxuKSAhZGVmYXVsdDtcblxuLy8vXG4vLy8gRGVmaW5lcyBhIG51bWJlciB0byBiZSBhZGRlZCBvciBzdWJ0cmFjdGVkIGZyb20gZWFjaCB1bml0IHdoZW4gZGVjbGFyaW5nIGJyZWFrcG9pbnRzIHdpdGggZXhjbHVzaXZlIGludGVydmFsc1xuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIEludGVydmFsIGZvciBwaXhlbHMgaXMgZGVmaW5lZCBhcyBgMWAgYnkgZGVmYXVsdFxuLy8vICBAaW5jbHVkZSBtZWRpYSgnPjEyOHB4Jykge31cbi8vL1xuLy8vICAvKiBHZW5lcmF0ZXM6ICovXG4vLy8gIEBtZWRpYSAobWluLXdpZHRoOiAxMjlweCkge31cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBJbnRlcnZhbCBmb3IgZW1zIGlzIGRlZmluZWQgYXMgYDAuMDFgIGJ5IGRlZmF1bHRcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz4yMGVtJykge31cbi8vL1xuLy8vICAvKiBHZW5lcmF0ZXM6ICovXG4vLy8gIEBtZWRpYSAobWluLXdpZHRoOiAyMC4wMWVtKSB7fVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIEludGVydmFsIGZvciByZW1zIGlzIGRlZmluZWQgYXMgYDAuMWAgYnkgZGVmYXVsdCwgdG8gYmUgdXNlZCB3aXRoIGBmb250LXNpemU6IDYyLjUlO2Bcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz4yLjByZW0nKSB7fVxuLy8vXG4vLy8gIC8qIEdlbmVyYXRlczogKi9cbi8vLyAgQG1lZGlhIChtaW4td2lkdGg6IDIuMXJlbSkge31cbi8vL1xuJHVuaXQtaW50ZXJ2YWxzOiAoXG4gICdweCc6IDEsXG4gICdlbSc6IDAuMDEsXG4gICdyZW0nOiAwLjEsXG4gICcnOiAwLFxuKSAhZGVmYXVsdDtcblxuLy8vXG4vLy8gRGVmaW5lcyB3aGV0aGVyIHN1cHBvcnQgZm9yIG1lZGlhIHF1ZXJpZXMgaXMgYXZhaWxhYmxlLCB1c2VmdWwgZm9yIGNyZWF0aW5nIHNlcGFyYXRlIHN0eWxlc2hlZXRzXG4vLy8gZm9yIGJyb3dzZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBtZWRpYSBxdWVyaWVzLlxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIERpc2FibGVzIHN1cHBvcnQgZm9yIG1lZGlhIHF1ZXJpZXNcbi8vLyAgJGltLW1lZGlhLXN1cHBvcnQ6IGZhbHNlO1xuLy8vICBAaW5jbHVkZSBtZWRpYSgnPj10YWJsZXQnKSB7XG4vLy8gICAgLmZvbyB7XG4vLy8gICAgICBjb2xvcjogdG9tYXRvO1xuLy8vICAgIH1cbi8vLyAgfVxuLy8vXG4vLy8gIC8qIEdlbmVyYXRlczogKi9cbi8vLyAgLmZvbyB7XG4vLy8gICAgY29sb3I6IHRvbWF0bztcbi8vLyAgfVxuLy8vXG4kaW0tbWVkaWEtc3VwcG9ydDogdHJ1ZSAhZGVmYXVsdDtcblxuLy8vXG4vLy8gU2VsZWN0cyB3aGljaCBicmVha3BvaW50IHRvIGVtdWxhdGUgd2hlbiBzdXBwb3J0IGZvciBtZWRpYSBxdWVyaWVzIGlzIGRpc2FibGVkLiBNZWRpYSBxdWVyaWVzIHRoYXQgc3RhcnQgYXQgb3Jcbi8vLyBpbnRlcmNlcHQgdGhlIGJyZWFrcG9pbnQgd2lsbCBiZSBkaXNwbGF5ZWQsIGFueSBvdGhlcnMgd2lsbCBiZSBpZ25vcmVkLlxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFRoaXMgbWVkaWEgcXVlcnkgd2lsbCBzaG93IGJlY2F1c2UgaXQgaW50ZXJjZXB0cyB0aGUgc3RhdGljIGJyZWFrcG9pbnRcbi8vLyAgJGltLW1lZGlhLXN1cHBvcnQ6IGZhbHNlO1xuLy8vICAkaW0tbm8tbWVkaWEtYnJlYWtwb2ludDogJ2Rlc2t0b3AnO1xuLy8vICBAaW5jbHVkZSBtZWRpYSgnPj10YWJsZXQnKSB7XG4vLy8gICAgLmZvbyB7XG4vLy8gICAgICBjb2xvcjogdG9tYXRvO1xuLy8vICAgIH1cbi8vLyAgfVxuLy8vXG4vLy8gIC8qIEdlbmVyYXRlczogKi9cbi8vLyAgLmZvbyB7XG4vLy8gICAgY29sb3I6IHRvbWF0bztcbi8vLyAgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFRoaXMgbWVkaWEgcXVlcnkgd2lsbCBOT1Qgc2hvdyBiZWNhdXNlIGl0IGRvZXMgbm90IGludGVyY2VwdCB0aGUgZGVza3RvcCBicmVha3BvaW50XG4vLy8gICRpbS1tZWRpYS1zdXBwb3J0OiBmYWxzZTtcbi8vLyAgJGltLW5vLW1lZGlhLWJyZWFrcG9pbnQ6ICd0YWJsZXQnO1xuLy8vICBAaW5jbHVkZSBtZWRpYSgnPj1kZXNrdG9wJykge1xuLy8vICAgIC5mb28ge1xuLy8vICAgICAgY29sb3I6IHRvbWF0bztcbi8vLyAgICB9XG4vLy8gIH1cbi8vL1xuLy8vICAvKiBObyBvdXRwdXQgKi9cbi8vL1xuJGltLW5vLW1lZGlhLWJyZWFrcG9pbnQ6ICdkZXNrdG9wJyAhZGVmYXVsdDtcblxuLy8vXG4vLy8gU2VsZWN0cyB3aGljaCBtZWRpYSBleHByZXNzaW9ucyBhcmUgYWxsb3dlZCBpbiBhbiBleHByZXNzaW9uIGZvciBpdCB0byBiZSB1c2VkIHdoZW4gbWVkaWEgcXVlcmllc1xuLy8vIGFyZSBub3Qgc3VwcG9ydGVkLlxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFRoaXMgbWVkaWEgcXVlcnkgd2lsbCBzaG93IGJlY2F1c2UgaXQgaW50ZXJjZXB0cyB0aGUgc3RhdGljIGJyZWFrcG9pbnQgYW5kIGNvbnRhaW5zIG9ubHkgYWNjZXB0ZWQgbWVkaWEgZXhwcmVzc2lvbnNcbi8vLyAgJGltLW1lZGlhLXN1cHBvcnQ6IGZhbHNlO1xuLy8vICAkaW0tbm8tbWVkaWEtYnJlYWtwb2ludDogJ2Rlc2t0b3AnO1xuLy8vICAkaW0tbm8tbWVkaWEtZXhwcmVzc2lvbnM6ICgnc2NyZWVuJyk7XG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+PXRhYmxldCcsICdzY3JlZW4nKSB7XG4vLy8gICAgLmZvbyB7XG4vLy8gICAgICBjb2xvcjogdG9tYXRvO1xuLy8vICAgIH1cbi8vLyAgfVxuLy8vXG4vLy8gICAvKiBHZW5lcmF0ZXM6ICovXG4vLy8gICAuZm9vIHtcbi8vLyAgICAgY29sb3I6IHRvbWF0bztcbi8vLyAgIH1cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBUaGlzIG1lZGlhIHF1ZXJ5IHdpbGwgTk9UIHNob3cgYmVjYXVzZSBpdCBpbnRlcmNlcHRzIHRoZSBzdGF0aWMgYnJlYWtwb2ludCBidXQgY29udGFpbnMgYSBtZWRpYSBleHByZXNzaW9uIHRoYXQgaXMgbm90IGFjY2VwdGVkXG4vLy8gICRpbS1tZWRpYS1zdXBwb3J0OiBmYWxzZTtcbi8vLyAgJGltLW5vLW1lZGlhLWJyZWFrcG9pbnQ6ICdkZXNrdG9wJztcbi8vLyAgJGltLW5vLW1lZGlhLWV4cHJlc3Npb25zOiAoJ3NjcmVlbicpO1xuLy8vICBAaW5jbHVkZSBtZWRpYSgnPj10YWJsZXQnLCAncmV0aW5hMngnKSB7XG4vLy8gICAgLmZvbyB7XG4vLy8gICAgICBjb2xvcjogdG9tYXRvO1xuLy8vICAgIH1cbi8vLyAgfVxuLy8vXG4vLy8gIC8qIE5vIG91dHB1dCAqL1xuLy8vXG4kaW0tbm8tbWVkaWEtZXhwcmVzc2lvbnM6ICgnc2NyZWVuJywgJ3BvcnRyYWl0JywgJ2xhbmRzY2FwZScpICFkZWZhdWx0O1xuXG4vLy8vXG4vLy8gQ3Jvc3MtZW5naW5lIGxvZ2dpbmcgZW5naW5lXG4vLy8gQGF1dGhvciBLaXR0eSBHaXJhdWRlbFxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuLy8vL1xuXG4vLy9cbi8vLyBMb2cgYSBtZXNzYWdlIGVpdGhlciB3aXRoIGBAZXJyb3JgIGlmIHN1cHBvcnRlZFxuLy8vIGVsc2Ugd2l0aCBgQHdhcm5gLCB1c2luZyBgZmVhdHVyZS1leGlzdHMoJ2F0LWVycm9yJylgXG4vLy8gdG8gZGV0ZWN0IHN1cHBvcnQuXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZ30gJG1lc3NhZ2UgLSBNZXNzYWdlIHRvIGxvZ1xuLy8vXG5AZnVuY3Rpb24gaW0tbG9nKCRtZXNzYWdlKSB7XG4gIEBpZiBtZXRhLmZlYXR1cmUtZXhpc3RzKCdhdC1lcnJvcicpIHtcbiAgICBAZXJyb3IgJG1lc3NhZ2U7XG4gIH0gQGVsc2Uge1xuICAgIEB3YXJuICRtZXNzYWdlO1xuICAgICRfOiBub29wKCk7XG4gIH1cblxuICBAcmV0dXJuICRtZXNzYWdlO1xufVxuXG4vLy9cbi8vLyBXcmFwcGVyIG1peGluIGZvciB0aGUgbG9nIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSB1c2VkIHdpdGggYSBtb3JlIGZyaWVuZGx5XG4vLy8gQVBJIHRoYW4gYEBpZiBpbS1sb2coJy4uJykge31gIG9yIGAkXzogaW0tbG9nKCcuLicpYC4gQmFzaWNhbGx5LCB1c2UgdGhlIGZ1bmN0aW9uXG4vLy8gd2l0aGluIGZ1bmN0aW9ucyBiZWNhdXNlIGl0IGlzIG5vdCBwb3NzaWJsZSB0byBpbmNsdWRlIGEgbWl4aW4gaW4gYSBmdW5jdGlvblxuLy8vIGFuZCB1c2UgdGhlIG1peGluIGV2ZXJ5d2hlcmUgZWxzZSBiZWNhdXNlIGl0J3MgbXVjaCBtb3JlIGVsZWdhbnQuXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZ30gJG1lc3NhZ2UgLSBNZXNzYWdlIHRvIGxvZ1xuLy8vXG5AbWl4aW4gbG9nKCRtZXNzYWdlKSB7XG4gIEBpZiBpbS1sb2coJG1lc3NhZ2UpIHtcbiAgfVxufVxuXG4vLy9cbi8vLyBGdW5jdGlvbiB3aXRoIG5vIGBAcmV0dXJuYCBjYWxsZWQgbmV4dCB0byBgQHdhcm5gIGluIFNhc3MgMy4zXG4vLy8gdG8gdHJpZ2dlciBhIGNvbXBpbGluZyBlcnJvciBhbmQgc3RvcCB0aGUgcHJvY2Vzcy5cbi8vL1xuQGZ1bmN0aW9uIG5vb3AoKSB7XG59XG5cbi8vL1xuLy8vIERldGVybWluZXMgd2hldGhlciBhIGxpc3Qgb2YgY29uZGl0aW9ucyBpcyBpbnRlcmNlcHRlZCBieSB0aGUgc3RhdGljIGJyZWFrcG9pbnQuXG4vLy9cbi8vLyBAcGFyYW0ge0FyZ2xpc3R9ICAgJGNvbmRpdGlvbnMgIC0gTWVkaWEgcXVlcnkgY29uZGl0aW9uc1xuLy8vXG4vLy8gQHJldHVybiB7Qm9vbGVhbn0gLSBSZXR1cm5zIHRydWUgaWYgdGhlIGNvbmRpdGlvbnMgYXJlIGludGVyY2VwdGVkIGJ5IHRoZSBzdGF0aWMgYnJlYWtwb2ludFxuLy8vXG5AZnVuY3Rpb24gaW0taW50ZXJjZXB0cy1zdGF0aWMtYnJlYWtwb2ludCgkY29uZGl0aW9ucy4uLikge1xuICAkbm8tbWVkaWEtYnJlYWtwb2ludC12YWx1ZTogbWFwLmdldCgkYnJlYWtwb2ludHMsICRpbS1uby1tZWRpYS1icmVha3BvaW50KTtcblxuICBAaWYgbm90ICRuby1tZWRpYS1icmVha3BvaW50LXZhbHVlIHtcbiAgICBAaWYgaW0tbG9nKCdgI3skaW0tbm8tbWVkaWEtYnJlYWtwb2ludH1gIGlzIG5vdCBhIHZhbGlkIGJyZWFrcG9pbnQuJykge1xuICAgIH1cbiAgfVxuXG4gIEBlYWNoICRjb25kaXRpb24gaW4gJGNvbmRpdGlvbnMge1xuICAgIEBpZiBub3QgbWFwLmhhcy1rZXkoJG1lZGlhLWV4cHJlc3Npb25zLCAkY29uZGl0aW9uKSB7XG4gICAgICAkb3BlcmF0b3I6IGdldC1leHByZXNzaW9uLW9wZXJhdG9yKCRjb25kaXRpb24pO1xuICAgICAgJHByZWZpeDogZ2V0LWV4cHJlc3Npb24tcHJlZml4KCRvcGVyYXRvcik7XG4gICAgICAkdmFsdWU6IGdldC1leHByZXNzaW9uLXZhbHVlKCRjb25kaXRpb24sICRvcGVyYXRvcik7XG5cbiAgICAgIEBpZiAoJHByZWZpeCA9PSAnbWF4JyBhbmQgJHZhbHVlIDw9ICRuby1tZWRpYS1icmVha3BvaW50LXZhbHVlKSBvclxuICAgICAgICAoJHByZWZpeCA9PSAnbWluJyBhbmQgJHZhbHVlID4gJG5vLW1lZGlhLWJyZWFrcG9pbnQtdmFsdWUpXG4gICAgICB7XG4gICAgICAgIEByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBAZWxzZSBpZiBub3QgbGlzdC5pbmRleCgkaW0tbm8tbWVkaWEtZXhwcmVzc2lvbnMsICRjb25kaXRpb24pIHtcbiAgICAgIEByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiB0cnVlO1xufVxuXG4vLy8vXG4vLy8gUGFyc2luZyBlbmdpbmVcbi8vLyBAYXV0aG9yIEtpdHR5IEdpcmF1ZGVsXG4vLy8gQGFjY2VzcyBwcml2YXRlXG4vLy8vXG5cbi8vL1xuLy8vIEdldCBvcGVyYXRvciBvZiBhbiBleHByZXNzaW9uXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZ30gJGV4cHJlc3Npb24gLSBFeHByZXNzaW9uIHRvIGV4dHJhY3Qgb3BlcmF0b3IgZnJvbVxuLy8vXG4vLy8gQHJldHVybiB7U3RyaW5nfSAtIEFueSBvZiBgPj1gLCBgPmAsIGA8PWAsIGA8YCwgYOKJpWAsIGDiiaRgXG4vLy9cbkBmdW5jdGlvbiBnZXQtZXhwcmVzc2lvbi1vcGVyYXRvcigkZXhwcmVzc2lvbikge1xuICBAZWFjaCAkb3BlcmF0b3IgaW4gKCc+PScsICc+JywgJzw9JywgJzwnLCAn4omlJywgJ+KJpCcpIHtcbiAgICBAaWYgc3RyaW5nLmluZGV4KCRleHByZXNzaW9uLCAkb3BlcmF0b3IpIHtcbiAgICAgIEByZXR1cm4gJG9wZXJhdG9yO1xuICAgIH1cbiAgfVxuXG4gIC8vIEl0IGlzIG5vdCBwb3NzaWJsZSB0byBpbmNsdWRlIGEgbWl4aW4gaW5zaWRlIGEgZnVuY3Rpb24sIHNvIHdlIGhhdmUgdG9cbiAgLy8gcmVseSBvbiB0aGUgYGltLWxvZyguLilgIGZ1bmN0aW9uIHJhdGhlciB0aGFuIHRoZSBgbG9nKC4uKWAgbWl4aW4uIEJlY2F1c2VcbiAgLy8gZnVuY3Rpb25zIGNhbm5vdCBiZSBjYWxsZWQgYW55d2hlcmUgaW4gU2Fzcywgd2UgbmVlZCB0byBoYWNrIHRoZSBjYWxsIGluXG4gIC8vIGEgZHVtbXkgdmFyaWFibGUsIHN1Y2ggYXMgYCRfYC4gSWYgYW55Ym9keSBldmVyIHJhaXNlIGEgc2NvcGluZyBpc3N1ZSB3aXRoXG4gIC8vIFNhc3MgMy4zLCBjaGFuZ2UgdGhpcyBsaW5lIGluIGBAaWYgaW0tbG9nKC4uKSB7fWAgaW5zdGVhZC5cbiAgJF86IGltLWxvZygnTm8gb3BlcmF0b3IgZm91bmQgaW4gYCN7JGV4cHJlc3Npb259YC4nKTtcbn1cblxuLy8vXG4vLy8gR2V0IGRpbWVuc2lvbiBvZiBhbiBleHByZXNzaW9uLCBiYXNlZCBvbiBhIGZvdW5kIG9wZXJhdG9yXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZ30gJGV4cHJlc3Npb24gLSBFeHByZXNzaW9uIHRvIGV4dHJhY3QgZGltZW5zaW9uIGZyb21cbi8vLyBAcGFyYW0ge1N0cmluZ30gJG9wZXJhdG9yIC0gT3BlcmF0b3IgZnJvbSBgJGV4cHJlc3Npb25gXG4vLy9cbi8vLyBAcmV0dXJuIHtTdHJpbmd9IC0gYHdpZHRoYCBvciBgaGVpZ2h0YCAob3IgcG90ZW50aWFsbHkgYW55dGhpbmcgZWxzZSlcbi8vL1xuQGZ1bmN0aW9uIGdldC1leHByZXNzaW9uLWRpbWVuc2lvbigkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKSB7XG4gICRvcGVyYXRvci1pbmRleDogc3RyaW5nLmluZGV4KCRleHByZXNzaW9uLCAkb3BlcmF0b3IpO1xuICAkcGFyc2VkLWRpbWVuc2lvbjogc3RyaW5nLnNsaWNlKCRleHByZXNzaW9uLCAwLCAkb3BlcmF0b3ItaW5kZXggLSAxKTtcbiAgJGRpbWVuc2lvbjogJ3dpZHRoJztcblxuICBAaWYgc3RyaW5nLmxlbmd0aCgkcGFyc2VkLWRpbWVuc2lvbikgPiAwIHtcbiAgICAkZGltZW5zaW9uOiAkcGFyc2VkLWRpbWVuc2lvbjtcbiAgfVxuXG4gIEByZXR1cm4gJGRpbWVuc2lvbjtcbn1cblxuLy8vXG4vLy8gR2V0IGRpbWVuc2lvbiBwcmVmaXggYmFzZWQgb24gYW4gb3BlcmF0b3Jcbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkb3BlcmF0b3IgLSBPcGVyYXRvclxuLy8vXG4vLy8gQHJldHVybiB7U3RyaW5nfSAtIGBtaW5gIG9yIGBtYXhgXG4vLy9cbkBmdW5jdGlvbiBnZXQtZXhwcmVzc2lvbi1wcmVmaXgoJG9wZXJhdG9yKSB7XG4gIEByZXR1cm4gaWYobGlzdC5pbmRleCgoJzwnLCAnPD0nLCAn4omkJyksICRvcGVyYXRvciksICdtYXgnLCAnbWluJyk7XG59XG5cbi8vL1xuLy8vIEdldCB2YWx1ZSBvZiBhbiBleHByZXNzaW9uLCBiYXNlZCBvbiBhIGZvdW5kIG9wZXJhdG9yXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZ30gJGV4cHJlc3Npb24gLSBFeHByZXNzaW9uIHRvIGV4dHJhY3QgdmFsdWUgZnJvbVxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkb3BlcmF0b3IgLSBPcGVyYXRvciBmcm9tIGAkZXhwcmVzc2lvbmBcbi8vL1xuLy8vIEByZXR1cm4ge051bWJlcn0gLSBBIG51bWVyaWMgdmFsdWVcbi8vL1xuQGZ1bmN0aW9uIGdldC1leHByZXNzaW9uLXZhbHVlKCRleHByZXNzaW9uLCAkb3BlcmF0b3IpIHtcbiAgJG9wZXJhdG9yLWluZGV4OiBzdHJpbmcuaW5kZXgoJGV4cHJlc3Npb24sICRvcGVyYXRvcik7XG4gICR2YWx1ZTogc3RyaW5nLnNsaWNlKCRleHByZXNzaW9uLCAkb3BlcmF0b3ItaW5kZXggKyBzdHJpbmcubGVuZ3RoKCRvcGVyYXRvcikpO1xuXG4gIEBpZiBtYXAuaGFzLWtleSgkYnJlYWtwb2ludHMsICR2YWx1ZSkge1xuICAgICR2YWx1ZTogbWFwLmdldCgkYnJlYWtwb2ludHMsICR2YWx1ZSk7XG4gIH0gQGVsc2Uge1xuICAgICR2YWx1ZTogdG8tbnVtYmVyKCR2YWx1ZSk7XG4gIH1cblxuICAkaW50ZXJ2YWw6IG1hcC5nZXQoJHVuaXQtaW50ZXJ2YWxzLCBtYXRoLnVuaXQoJHZhbHVlKSk7XG5cbiAgQGlmIG5vdCAkaW50ZXJ2YWwge1xuICAgIC8vIEl0IGlzIG5vdCBwb3NzaWJsZSB0byBpbmNsdWRlIGEgbWl4aW4gaW5zaWRlIGEgZnVuY3Rpb24sIHNvIHdlIGhhdmUgdG9cbiAgICAvLyByZWx5IG9uIHRoZSBgaW0tbG9nKC4uKWAgZnVuY3Rpb24gcmF0aGVyIHRoYW4gdGhlIGBsb2coLi4pYCBtaXhpbi4gQmVjYXVzZVxuICAgIC8vIGZ1bmN0aW9ucyBjYW5ub3QgYmUgY2FsbGVkIGFueXdoZXJlIGluIFNhc3MsIHdlIG5lZWQgdG8gaGFjayB0aGUgY2FsbCBpblxuICAgIC8vIGEgZHVtbXkgdmFyaWFibGUsIHN1Y2ggYXMgYCRfYC4gSWYgYW55Ym9keSBldmVyIHJhaXNlIGEgc2NvcGluZyBpc3N1ZSB3aXRoXG4gICAgLy8gU2FzcyAzLjMsIGNoYW5nZSB0aGlzIGxpbmUgaW4gYEBpZiBpbS1sb2coLi4pIHt9YCBpbnN0ZWFkLlxuICAgICRfOiBpbS1sb2coJ1Vua25vd24gdW5pdCBgI3ttYXRoLnVuaXQoJHZhbHVlKX1gLicpO1xuICB9XG5cbiAgQGlmICRvcGVyYXRvciA9PSAnPicge1xuICAgICR2YWx1ZTogJHZhbHVlICsgJGludGVydmFsO1xuICB9IEBlbHNlIGlmICRvcGVyYXRvciA9PSAnPCcge1xuICAgICR2YWx1ZTogJHZhbHVlIC0gJGludGVydmFsO1xuICB9XG5cbiAgQHJldHVybiAkdmFsdWU7XG59XG5cbi8vL1xuLy8vIFBhcnNlIGFuIGV4cHJlc3Npb24gdG8gcmV0dXJuIGEgdmFsaWQgbWVkaWEtcXVlcnkgZXhwcmVzc2lvblxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRleHByZXNzaW9uIC0gRXhwcmVzc2lvbiB0byBwYXJzZVxuLy8vXG4vLy8gQHJldHVybiB7U3RyaW5nfSAtIFZhbGlkIG1lZGlhIHF1ZXJ5XG4vLy9cbkBmdW5jdGlvbiBwYXJzZS1leHByZXNzaW9uKCRleHByZXNzaW9uKSB7XG4gIC8vIElmIGl0IGlzIHBhcnQgb2YgJG1lZGlhLWV4cHJlc3Npb25zLCBpdCBoYXMgbm8gb3BlcmF0b3JcbiAgLy8gdGhlbiB0aGVyZSBpcyBubyBuZWVkIHRvIGdvIGFueSBmdXJ0aGVyLCBqdXN0IHJldHVybiB0aGUgdmFsdWVcbiAgQGlmIG1hcC5oYXMta2V5KCRtZWRpYS1leHByZXNzaW9ucywgJGV4cHJlc3Npb24pIHtcbiAgICBAcmV0dXJuIG1hcC5nZXQoJG1lZGlhLWV4cHJlc3Npb25zLCAkZXhwcmVzc2lvbik7XG4gIH1cblxuICAkb3BlcmF0b3I6IGdldC1leHByZXNzaW9uLW9wZXJhdG9yKCRleHByZXNzaW9uKTtcbiAgJGRpbWVuc2lvbjogZ2V0LWV4cHJlc3Npb24tZGltZW5zaW9uKCRleHByZXNzaW9uLCAkb3BlcmF0b3IpO1xuICAkcHJlZml4OiBnZXQtZXhwcmVzc2lvbi1wcmVmaXgoJG9wZXJhdG9yKTtcbiAgJHZhbHVlOiBnZXQtZXhwcmVzc2lvbi12YWx1ZSgkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKTtcblxuICBAcmV0dXJuICcoI3skcHJlZml4fS0jeyRkaW1lbnNpb259OiAjeyR2YWx1ZX0pJztcbn1cblxuLy8vXG4vLy8gU2xpY2UgYCRsaXN0YCBiZXR3ZWVuIGAkc3RhcnRgIGFuZCBgJGVuZGAgaW5kZXhlc1xuLy8vXG4vLy8gQGFjY2VzcyBwcml2YXRlXG4vLy9cbi8vLyBAcGFyYW0ge0xpc3R9ICRsaXN0IC0gTGlzdCB0byBzbGljZVxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkc3RhcnQgWzFdIC0gU3RhcnQgaW5kZXhcbi8vLyBAcGFyYW0ge051bWJlcn0gJGVuZCBbbGVuZ3RoKCRsaXN0KV0gLSBFbmQgaW5kZXhcbi8vL1xuLy8vIEByZXR1cm4ge0xpc3R9IFNsaWNlZCBsaXN0XG4vLy9cbkBmdW5jdGlvbiBzbGljZSgkbGlzdCwgJHN0YXJ0OiAxLCAkZW5kOiBsaXN0Lmxlbmd0aCgkbGlzdCkpIHtcbiAgQGlmIGxpc3QubGVuZ3RoKCRsaXN0KSA8IDEgb3IgJHN0YXJ0ID4gJGVuZCB7XG4gICAgQHJldHVybiAoKTtcbiAgfVxuXG4gICRyZXN1bHQ6ICgpO1xuXG4gIEBmb3IgJGkgZnJvbSAkc3RhcnQgdGhyb3VnaCAkZW5kIHtcbiAgICAkcmVzdWx0OiBsaXN0LmFwcGVuZCgkcmVzdWx0LCBsaXN0Lm50aCgkbGlzdCwgJGkpLCBjb21tYSk7XG4gIH1cblxuICBAcmV0dXJuICRyZXN1bHQ7XG59XG5cbi8vLy9cbi8vLyBTdHJpbmcgdG8gbnVtYmVyIGNvbnZlcnRlclxuLy8vIEBhdXRob3IgS2l0dHkgR2lyYXVkZWxcbi8vLyBAYWNjZXNzIHByaXZhdGVcbi8vLy9cblxuLy8vXG4vLy8gQ2FzdHMgYSBzdHJpbmcgaW50byBhIG51bWJlclxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmcgfCBOdW1iZXJ9ICR2YWx1ZSAtIFZhbHVlIHRvIGJlIHBhcnNlZFxuLy8vXG4vLy8gQHJldHVybiB7TnVtYmVyfVxuLy8vXG5cbkBmdW5jdGlvbiB0by1udW1iZXIoJHZhbHVlKSB7XG4gIEBpZiBtZXRhLnR5cGUtb2YoJHZhbHVlKSA9PSAnbnVtYmVyJyB7XG4gICAgQHJldHVybiAkdmFsdWU7XG4gIH0gQGVsc2UgaWYgbWV0YS50eXBlLW9mKCR2YWx1ZSkgIT0gJ3N0cmluZycge1xuICAgICRfOiBpbS1sb2coJ1ZhbHVlIGZvciBgdG8tbnVtYmVyYCBzaG91bGQgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcuJyk7XG4gIH1cblxuICAkZmlyc3QtY2hhcmFjdGVyOiBzdHJpbmcuc2xpY2UoJHZhbHVlLCAxLCAxKTtcbiAgJHJlc3VsdDogMDtcbiAgJGRpZ2l0czogMDtcbiAgJG1pbnVzOiAoJGZpcnN0LWNoYXJhY3RlciA9PSAnLScpO1xuICAkbnVtYmVyczogKFxuICAgICcwJzogMCxcbiAgICAnMSc6IDEsXG4gICAgJzInOiAyLFxuICAgICczJzogMyxcbiAgICAnNCc6IDQsXG4gICAgJzUnOiA1LFxuICAgICc2JzogNixcbiAgICAnNyc6IDcsXG4gICAgJzgnOiA4LFxuICAgICc5JzogOSxcbiAgKTtcblxuICAvLyBSZW1vdmUgKy8tIHNpZ24gaWYgcHJlc2VudCBhdCBmaXJzdCBjaGFyYWN0ZXJcbiAgQGlmICgkZmlyc3QtY2hhcmFjdGVyID09ICcrJyBvciAkZmlyc3QtY2hhcmFjdGVyID09ICctJykge1xuICAgICR2YWx1ZTogc3RyaW5nLnNsaWNlKCR2YWx1ZSwgMik7XG4gIH1cblxuICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIHN0cmluZy5sZW5ndGgoJHZhbHVlKSB7XG4gICAgJGNoYXJhY3Rlcjogc3RyaW5nLnNsaWNlKCR2YWx1ZSwgJGksICRpKTtcblxuICAgIEBpZiBub3QobGlzdC5pbmRleChtYXAua2V5cygkbnVtYmVycyksICRjaGFyYWN0ZXIpIG9yICRjaGFyYWN0ZXIgPT0gJy4nKSB7XG4gICAgICBAcmV0dXJuIHRvLWxlbmd0aChpZigkbWludXMsIC0kcmVzdWx0LCAkcmVzdWx0KSwgc3RyaW5nLnNsaWNlKCR2YWx1ZSwgJGkpKTtcbiAgICB9XG5cbiAgICBAaWYgJGNoYXJhY3RlciA9PSAnLicge1xuICAgICAgJGRpZ2l0czogMTtcbiAgICB9IEBlbHNlIGlmICRkaWdpdHMgPT0gMCB7XG4gICAgICAkcmVzdWx0OiAkcmVzdWx0ICogMTAgKyBtYXAuZ2V0KCRudW1iZXJzLCAkY2hhcmFjdGVyKTtcbiAgICB9IEBlbHNlIHtcbiAgICAgICRkaWdpdHM6ICRkaWdpdHMgKiAxMDtcbiAgICAgICRyZXN1bHQ6ICRyZXN1bHQgKyBtYXRoLmRpdihtYXAuZ2V0KCRudW1iZXJzLCAkY2hhcmFjdGVyKSwgJGRpZ2l0cyk7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiBpZigkbWludXMsIC0kcmVzdWx0LCAkcmVzdWx0KTtcbn1cblxuLy8vXG4vLy8gQWRkIGAkdW5pdGAgdG8gYCR2YWx1ZWBcbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkdmFsdWUgLSBWYWx1ZSB0byBhZGQgdW5pdCB0b1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkdW5pdCAtIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdW5pdFxuLy8vXG4vLy8gQHJldHVybiB7TnVtYmVyfSAtIGAkdmFsdWVgIGV4cHJlc3NlZCBpbiBgJHVuaXRgXG4vLy9cbkBmdW5jdGlvbiB0by1sZW5ndGgoJHZhbHVlLCAkdW5pdCkge1xuICAkdW5pdHM6IChcbiAgICAncHgnOiAxcHgsXG4gICAgJ2NtJzogMWNtLFxuICAgICdtbSc6IDFtbSxcbiAgICAnJSc6IDElLFxuICAgICdjaCc6IDFjaCxcbiAgICAncGMnOiAxcGMsXG4gICAgJ2luJzogMWluLFxuICAgICdlbSc6IDFlbSxcbiAgICAncmVtJzogMXJlbSxcbiAgICAncHQnOiAxcHQsXG4gICAgJ2V4JzogMWV4LFxuICAgICd2dyc6IDF2dyxcbiAgICAndmgnOiAxdmgsXG4gICAgJ3ZtaW4nOiAxdm1pbixcbiAgICAndm1heCc6IDF2bWF4LFxuICApO1xuXG4gIEBpZiBub3QgbGlzdC5pbmRleChtYXAua2V5cygkdW5pdHMpLCAkdW5pdCkge1xuICAgICRfOiBpbS1sb2coJ0ludmFsaWQgdW5pdCBgI3skdW5pdH1gLicpO1xuICB9XG5cbiAgQHJldHVybiAkdmFsdWUgKiBtYXAuZ2V0KCR1bml0cywgJHVuaXQpO1xufVxuXG4vLy9cbi8vLyBUaGlzIG1peGluIGFpbXMgYXQgcmVkZWZpbmluZyB0aGUgY29uZmlndXJhdGlvbiBqdXN0IGZvciB0aGUgc2NvcGUgb2Zcbi8vLyB0aGUgY2FsbC4gSXQgaXMgaGVscGZ1bCB3aGVuIGhhdmluZyBhIGNvbXBvbmVudCBuZWVkaW5nIGFuIGV4dGVuZGVkXG4vLy8gY29uZmlndXJhdGlvbiBzdWNoIGFzIGN1c3RvbSBicmVha3BvaW50cyAocmVmZXJyZWQgdG8gYXMgdHdlYWtwb2ludHMpXG4vLy8gZm9yIGluc3RhbmNlLlxuLy8vXG4vLy8gQGF1dGhvciBLaXR0eSBHaXJhdWRlbFxuLy8vXG4vLy8gQHBhcmFtIHtNYXB9ICR0d2Vha3BvaW50cyBbKCldIC0gTWFwIG9mIHR3ZWFrcG9pbnRzIHRvIGJlIG1lcmdlZCB3aXRoIGAkYnJlYWtwb2ludHNgXG4vLy8gQHBhcmFtIHtNYXB9ICR0d2Vhay1tZWRpYS1leHByZXNzaW9ucyBbKCldIC0gTWFwIG9mIHR3ZWFrZWQgbWVkaWEgZXhwcmVzc2lvbnMgdG8gYmUgbWVyZ2VkIHdpdGggYCRtZWRpYS1leHByZXNzaW9uYFxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIEV4dGVuZCB0aGUgZ2xvYmFsIGJyZWFrcG9pbnRzIHdpdGggYSB0d2Vha3BvaW50XG4vLy8gIEBpbmNsdWRlIG1lZGlhLWNvbnRleHQoKCdjdXN0b20nOiA2NzhweCkpIHtcbi8vLyAgICAuZm9vIHtcbi8vLyAgICAgIEBpbmNsdWRlIG1lZGlhKCc+cGhvbmUnLCAnPD1jdXN0b20nKSB7XG4vLy8gICAgICAgLy8gLi4uXG4vLy8gICAgICB9XG4vLy8gICAgfVxuLy8vICB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gRXh0ZW5kIHRoZSBnbG9iYWwgbWVkaWEgZXhwcmVzc2lvbnMgd2l0aCBhIGN1c3RvbSBvbmVcbi8vLyAgQGluY2x1ZGUgbWVkaWEtY29udGV4dCgkdHdlYWstbWVkaWEtZXhwcmVzc2lvbnM6ICgnYWxsJzogJ2FsbCcpKSB7XG4vLy8gICAgLmZvbyB7XG4vLy8gICAgICBAaW5jbHVkZSBtZWRpYSgnYWxsJywgJz5waG9uZScpIHtcbi8vLyAgICAgICAvLyAuLi5cbi8vLyAgICAgIH1cbi8vLyAgICB9XG4vLy8gIH1cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBFeHRlbmQgYm90aCBjb25maWd1cmF0aW9uIG1hcHNcbi8vLyAgQGluY2x1ZGUgbWVkaWEtY29udGV4dCgoJ2N1c3RvbSc6IDY3OHB4KSwgKCdhbGwnOiAnYWxsJykpIHtcbi8vLyAgICAuZm9vIHtcbi8vLyAgICAgIEBpbmNsdWRlIG1lZGlhKCdhbGwnLCAnPnBob25lJywgJzw9Y3VzdG9tJykge1xuLy8vICAgICAgIC8vIC4uLlxuLy8vICAgICAgfVxuLy8vICAgIH1cbi8vLyAgfVxuLy8vXG5AbWl4aW4gbWVkaWEtY29udGV4dCgkdHdlYWtwb2ludHM6ICgpLCAkdHdlYWstbWVkaWEtZXhwcmVzc2lvbnM6ICgpKSB7XG4gIC8vIFNhdmUgZ2xvYmFsIGNvbmZpZ3VyYXRpb25cbiAgJGdsb2JhbC1icmVha3BvaW50czogJGJyZWFrcG9pbnRzO1xuICAkZ2xvYmFsLW1lZGlhLWV4cHJlc3Npb25zOiAkbWVkaWEtZXhwcmVzc2lvbnM7XG5cbiAgLy8gVXBkYXRlIGdsb2JhbCBjb25maWd1cmF0aW9uXG4gICRicmVha3BvaW50czogbWFwLm1lcmdlKCRicmVha3BvaW50cywgJHR3ZWFrcG9pbnRzKSAhZ2xvYmFsO1xuICAkbWVkaWEtZXhwcmVzc2lvbnM6IG1hcC5tZXJnZSgkbWVkaWEtZXhwcmVzc2lvbnMsICR0d2Vhay1tZWRpYS1leHByZXNzaW9ucykgIWdsb2JhbDtcblxuICBAY29udGVudDtcblxuICAvLyBSZXN0b3JlIGdsb2JhbCBjb25maWd1cmF0aW9uXG4gICRicmVha3BvaW50czogJGdsb2JhbC1icmVha3BvaW50cyAhZ2xvYmFsO1xuICAkbWVkaWEtZXhwcmVzc2lvbnM6ICRnbG9iYWwtbWVkaWEtZXhwcmVzc2lvbnMgIWdsb2JhbDtcbn1cblxuLy8vL1xuLy8vIGluY2x1ZGUtbWVkaWEgcHVibGljIGV4cG9zZWQgQVBJXG4vLy8gQGF1dGhvciBFZHVhcmRvIEJvdWNhc1xuLy8vIEBhY2Nlc3MgcHVibGljXG4vLy8vXG5cbi8vL1xuLy8vIEdlbmVyYXRlcyBhIG1lZGlhIHF1ZXJ5IGJhc2VkIG9uIGEgbGlzdCBvZiBjb25kaXRpb25zXG4vLy9cbi8vLyBAcGFyYW0ge0FyZ2xpc3R9ICAgJGNvbmRpdGlvbnMgIC0gTWVkaWEgcXVlcnkgY29uZGl0aW9uc1xuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFdpdGggYSBzaW5nbGUgc2V0IGJyZWFrcG9pbnRcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz5waG9uZScpIHsgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFdpdGggdHdvIHNldCBicmVha3BvaW50c1xuLy8vICBAaW5jbHVkZSBtZWRpYSgnPnBob25lJywgJzw9dGFibGV0JykgeyB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gV2l0aCBjdXN0b20gdmFsdWVzXG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+PTM1OHB4JywgJzw4NTBweCcpIHsgfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFdpdGggc2V0IGJyZWFrcG9pbnRzIHdpdGggY3VzdG9tIHZhbHVlc1xuLy8vICBAaW5jbHVkZSBtZWRpYSgnPmRlc2t0b3AnLCAnPD0xMzUwcHgnKSB7IH1cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBXaXRoIGEgc3RhdGljIGV4cHJlc3Npb25cbi8vLyAgQGluY2x1ZGUgbWVkaWEoJ3JldGluYTJ4JykgeyB9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gTWl4aW5nIGV2ZXJ5dGhpbmdcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz49MzUwcHgnLCAnPHRhYmxldCcsICdyZXRpbmEzeCcpIHsgfVxuLy8vXG5AbWl4aW4gbWVkaWEoJGNvbmRpdGlvbnMuLi4pIHtcbiAgQGlmICgkaW0tbWVkaWEtc3VwcG9ydCBhbmQgbGlzdC5sZW5ndGgoJGNvbmRpdGlvbnMpID09IDApIG9yXG4gICAgKG5vdCAkaW0tbWVkaWEtc3VwcG9ydCBhbmQgaW0taW50ZXJjZXB0cy1zdGF0aWMtYnJlYWtwb2ludCgkY29uZGl0aW9ucy4uLikpXG4gIHtcbiAgICBAY29udGVudDtcbiAgfSBAZWxzZSBpZiAoJGltLW1lZGlhLXN1cHBvcnQgYW5kIGxpc3QubGVuZ3RoKCRjb25kaXRpb25zKSA+IDApIHtcbiAgICBAbWVkaWEgI3tzdHJpbmcudW5xdW90ZShwYXJzZS1leHByZXNzaW9uKGxpc3QubnRoKCRjb25kaXRpb25zLCAxKSkpfSB7XG4gICAgICAvLyBSZWN1cnNpdmUgY2FsbFxuICAgICAgQGluY2x1ZGUgbWVkaWEoc2xpY2UoJGNvbmRpdGlvbnMsIDIpLi4uKSB7XG4gICAgICAgIEBjb250ZW50O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLnByZWxvYWRlclxue1xuICBAZXh0ZW5kICVjb3ZlcjtcblxuICBiYWNrZ3JvdW5kOiAkY29sb3ItYmFja2dyb3VuZDtcblxuICBkaXNwbGF5OiBncmlkO1xuICBwbGFjZS1jb250ZW50OiBjZW50ZXI7XG5cbiAgei1pbmRleDogeigncHJlbG9hZGVyJyk7XG5cbiAgZGlzcGxheTogbm9uZTtcblxuICAmX19pbWdcbiAge1xuICAgIGhlaWdodDogNXJlbTtcbiAgICB3aWR0aDogNXJlbTtcblxuICB9XG59XG4iLCIubmF2XG57XG4gIHotaW5kZXg6IHooJ25hdmlnYXRpb24nKTtcblxuICBiYWNrZ3JvdW5kOiAkY29sb3ItcmVkO1xuXG4gIGhlaWdodDogMTIuNHJlbTtcbiAgd2lkdGg6IDEwMCU7XG5cbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG5cbiAgJl9fd3JhcHBlclxuICB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgYmFja2dyb3VuZDogJGNvbG9yLWJhY2tncm91bmQ7XG5cbiAgICBib3JkZXI6IDJweCBzb2xpZCAkY29sb3ItcmVkO1xuICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA0MHB4O1xuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDQwcHg7XG5cbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cblxuICAmX19sb2dvXG4gIHtcblxuICAgICZfX2ltYWdlXG4gICAge1xuXG4gICAgfVxuICB9XG5cbiAgJl9fbGlua3NcbiAge1xuICAgIGRpc3BsYXk6IGZsZXg7XG5cbiAgICAmX19pdGVtXG4gICAge1xuICAgICAgbWFyZ2luOiAwIDIuNHJlbTtcblxuXG4gICAgICAmX19saW5rXG4gICAgICB7XG4gICAgICAgIEBleHRlbmQgJWRlc2MtMjQ7XG5cbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLmFjdGl2ZVxue1xuICBAZXh0ZW5kICVsaW5rX19jZW50ZXI7XG5cbiAgY29sb3I6ICRjb2xvci1yZWQ7XG59XG5cbi5saW5rXG57XG4gIEBleHRlbmQgJWxpbmtfX2NlbnRlci0taGlkZGVuO1xufVxuIiwiLmZvb3Rlclxue1xuICBoZWlnaHQ6IDgwcmVtO1xuICB3aWR0aDogMTAwJTtcblxuICAmX19iYWNrZ3JvdW5kXG4gIHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICAmX19pbWdcbiAgICB7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgIH1cblxuICAgICZfX292ZXJsYXlcbiAgICB7XG4gICAgICBAZXh0ZW5kICVjb3ZlcjtcblxuICAgICAgYmFja2dyb3VuZDogIzAwMDAwMGUzO1xuICAgIH1cbiAgfVxufVxuIiwiLmhvbWVcbntcbiAgei1pbmRleDogeignY29udGVudCcpO1xuXG4gICZfX2hlYWRlclxuICB7XG4gICAgaGVpZ2h0OiA5MHJlbTtcblxuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMmZyIDFmcjtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgzLCAxZnIpO1xuXG4gICAgJl9fYmdcbiAgICB7XG4gICAgICBncmlkLWFyZWE6IDEgLyAxIC8gLTEgLyAtMTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgICAmX19pbWdcbiAgICAgIHtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJl9fdGl0bGVzXG4gICAge1xuICAgICAgZ3JpZC1hcmVhOiAyIC8gMiAvIDMgLyAzO1xuXG4gICAgICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcbiAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcblxuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gICAgICAmX19tYWluXG4gICAgICB7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgfVxuXG4gICAgICAmX190ZXh0XG4gICAgICB7XG4gICAgICAgIEBleHRlbmQgJXRpdGxlLTMyO1xuXG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBsZXR0ZXItc3BhY2luZzogM3JlbTtcbiAgICAgICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgIH1cblxuICAgICAgJl9fYnRtXG4gICAgICB7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICZfX3dlbGNvbWVcbiAge1xuICAgIG1hcmdpbjogMTVyZW0gMDtcblxuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogMTAwJTtcblxuXG4gICAgJl9fdGl0bGVcbiAgICB7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgICAgICZfX3RleHRcbiAgICAgIHtcbiAgICAgICAgQGV4dGVuZCAldGl0bGUtMzg7XG4gICAgICAgIEBleHRlbmQgJWxpbmtfX2NlbnRlcjtcblxuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgfVxuICAgIH1cblxuICAgICZfX3NlY3Rpb25zXG4gICAge1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgd2lkdGg6IDEwMCU7XG5cbiAgICAgIHBhZGRpbmc6IDEwcmVtIDI0cmVtO1xuXG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgICBnYXA6IDNyZW07XG5cbiAgICAgICZfX3NlY3Rpb25cbiAgICAgIHtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB3aWR0aDogMTAwJTtcblxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICAgICAgJl9faW1nXG4gICAgICAgIHtcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgIH1cblxuICAgICAgICAmX19vdmVybGF5XG4gICAgICAgIHtcbiAgICAgICAgICBvcGFjaXR5OiAwO1xuXG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgICBsZWZ0OiAwO1xuXG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgICAgICAgYm9yZGVyLXRvcDogMnB4IHNvbGlkICRjb2xvci1yZWQ7XG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICRjb2xvci1yZWQ7XG4gICAgICAgICAgYmFja2dyb3VuZDogIzAwMDAwMDtcblxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgZWFzZS1pbi1vdXQ7XG5cbiAgICAgICAgICAmOmhvdmVyXG4gICAgICAgICAge1xuICAgICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAmX19pY29uXG4gICAgICAgICAge1xuICAgICAgICAgICAgaGVpZ2h0OiAxMHJlbTtcbiAgICAgICAgICAgIHdpZHRoOiAxMHJlbTtcblxuICAgICAgICAgICAgcGFkZGluZzogMnJlbTtcblxuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJGNvbG9yLXJlZDtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcblxuICAgICAgICAgICAgJl9faW1nXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgICZfX3RpdGxlXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWFyZ2luOiAyLjVyZW0gMDtcblxuICAgICAgICAgICAgJl9fdGV4dFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBAZXh0ZW5kICV0aXRsZS0yMDtcblxuICAgICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgICZfX2Rlc2NcbiAgICAgICAgICB7XG5cbiAgICAgICAgICAgIHBhZGRpbmc6IDAgNXJlbTtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAgICAgICAgICAgJl9fdGV4dFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBAZXh0ZW5kICVkZXNjLTE0O1xuXG4gICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyLjJyZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIuY29udGFjdFxue1xuICBAZXh0ZW5kICVwYWdlX19tYWluO1xuXG4gICZfX3NlY3Rpb25cbiAge1xuICAgIEBleHRlbmQgJXBhZ2VfX3NlY3Rpb247XG5cbiAgICAmX19tZXNzYWdlXG4gICAge1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gICAgICAmX190ZXh0XG4gICAgICB7XG4gICAgICAgIEBleHRlbmQgJWRlc2MtMTg7XG5cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAuZm9ybVxuICB7XG4gICAgaGVpZ2h0OiA2NS45cmVtO1xuICB9XG59XG4iLCIucmVkXG57XG4gIGNvbG9yOiAkY29sb3ItcmVkO1xufVxuXG4ubG9naW5cbntcbiAgQGV4dGVuZCAlcGFnZV9fbWFpbjtcblxuICAuZm9ybVxuICB7XG4gICAgaGVpZ2h0OiAyNy45cmVtO1xuXG4gICAgbWFyZ2luOiA1cmVtIDAgMTByZW0gMDtcbiAgfVxuXG4gICZfX3NlY3Rpb25cbiAge1xuICAgIEBleHRlbmQgJXBhZ2VfX3NlY3Rpb247XG5cbiAgICBoZWlnaHQ6IDY0cmVtO1xuXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAgICZfX3RpdGxlc1xuICAgIHtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAgICAgJl9fbWFpblxuICAgICAge1xuICAgICAgICBAZXh0ZW5kICV0aXRsZS0yNDtcblxuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICBsZXR0ZXItc3BhY2luZzogMC4xOHJlbTtcbiAgICAgIH1cblxuICAgICAgJl9fc3ViXG4gICAgICB7XG4gICAgICAgIEBleHRlbmQgJWRlc2MtMTg7XG5cbiAgICAgICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDMuMjRyZW07XG4gICAgICB9XG4gICAgfVxuXG4gICAgJl9fbWVzc2FnZVxuICAgIHtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAgICAgJl9fdGV4dFxuICAgICAge1xuICAgICAgICBAZXh0ZW5kICVkZXNjLTE4O1xuXG4gICAgICAgIGFcbiAgICAgICAge1xuICAgICAgICAgIGNvbG9yOiAkY29sb3ItcmVkO1xuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIucmVkXG57XG4gIGNvbG9yOiAkY29sb3ItcmVkO1xufVxuXG4uaGVscFxue1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogOTAlO1xuICBsZWZ0OiAyMHJlbTtcblxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gIG9wYWNpdHk6IDAuMDtcblxuICAmX19pbmZvXG4gIHtcbiAgICBAZXh0ZW5kICVkZXNjLTE4O1xuXG4gICAgbGluZS1oZWlnaHQ6IDIuNXJlbTtcbiAgICBsZXR0ZXItc3BhY2luZzogMC4ycmVtO1xuICB9XG59XG5cbi5yZWdpc3Rlclxue1xuICBAZXh0ZW5kICVwYWdlX19tYWluO1xuXG4gIC5mb3JtXG4gIHtcbiAgICBoZWlnaHQ6IDQ5LjdyZW07XG5cbiAgICBtYXJnaW46IDJyZW0gMCAxMHJlbSAwO1xuICB9XG5cbiAgJl9fc2VjdGlvblxuICB7XG4gICAgQGV4dGVuZCAlcGFnZV9fc2VjdGlvbjtcblxuICAgIGhlaWdodDogODByZW07XG5cbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgJl9fdGl0bGVzXG4gICAge1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gICAgICAmX19tYWluXG4gICAgICB7XG4gICAgICAgIEBleHRlbmQgJXRpdGxlLTI0O1xuXG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgIGxldHRlci1zcGFjaW5nOiAwLjE4cmVtO1xuICAgICAgfVxuXG4gICAgICAmX19zdWJcbiAgICAgIHtcbiAgICAgICAgQGV4dGVuZCAlZGVzYy0xODtcblxuICAgICAgICBtYXJnaW4tdG9wOiAycmVtO1xuICAgICAgICBsaW5lLWhlaWdodDogMy4yNHJlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==*/