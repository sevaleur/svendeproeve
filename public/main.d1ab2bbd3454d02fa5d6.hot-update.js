/*! For license information please see main.d1ab2bbd3454d02fa5d6.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatesvendeproeve("main",{"./app/classes/Validation.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var a=s("./node_modules/gsap/index.js"),o=s("./app/classes/Post.js");class r{constructor(t,{...e},s,a,o,r,i=!1){this.status={},this.data={},this.validateInput(e),this.submit(t,e,i,s,a,o,r)}validateInput(t){for(const[e,s]of Object.entries(t))switch(this.status[e]=!1,e){case"email":s.addEventListener("change",(()=>{this.checkMail(s.value)?(this.data.email=s.value,this.status.email=!0,a.default.to(s,{borderColor:"currentColor",duration:.2})):(a.default.to(s,{borderColor:"#ff0000",duration:.2}),s.placeholder="Your email is required",s.focus(),this.status.email=!1)}));break;case"name":s.addEventListener("input",(()=>{s.value.length>1?(this.data.name=s.value,this.status.name=!0,a.default.to(s,{borderColor:"currentColor",duration:.2})):(this.status.name=!1,a.default.to(s,{borderColor:"#ff0000",duration:.2}),s.placeholder="Please write your name",s.focus())}));break;case"password":default:break;case"message":s.addEventListener("input",(()=>{console.log(this.status),s.value.length>10?(this.data.message=s.value,this.status.message=!0,a.default.to(s,{borderColor:"currentColor",duration:.2})):(a.default.to(s,{borderColor:"#ff0000",duration:.2}),s.placeholder="Your message must be at least 10 characters long",s.focus(),this.status.message=!1)}))}}checkMail(t){return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(t)}checkPassword(t){}submit(t,e,s,r,i,l,u){l.addEventListener("click",(l=>{l.preventDefault();let n=0;const d=Object.keys(this.status).length;s&&(this.data[s]=(new Date).toJSON());for(const t of Object.values(this.status))t?n++:this.submitError(e,u,i);n===d?(this.post=new o.default(t,{...this.data}),Promise.resolve(this.post.res).then((t=>{if(201===t.status){for(const[t,s]of Object.entries(e)){let e=t.charAt(0).toUpperCase()+t.slice(1);s.placeholder=`Your ${e}`,s.value=""}u.innerHTML=`${r}`}else{for(const t of Object.keys(e))a.default.to(t,{borderColor:"#ff0000",duration:.2});u.innerHTML=`${i}`}}))):this.submitError(e,u,i)}))}submitError(t,e,s){for(const[a,o]of Object.entries(this.status))o?e.innerHTML=`${s}`:(t[a].focus(),e.innerHTML=`Please fill out your ${a}`)}}}},(function(t){t.h=()=>"07887cd78e8d947e0cc6"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,